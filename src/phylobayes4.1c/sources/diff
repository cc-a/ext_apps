

BF.cpp


Bipartition.cpp


BipartitionList.cpp
181c181
< 			// osp << "cutoff : " << cutoff << '\n';
---
> 			osp << "cutoff : " << cutoff << '\n';


BPCompare.cpp


Chain.cpp
167c167
< 			Trace_os << "\tnmode\tstat";
---
> 			Trace_os << "\tnocc\tstat";
1125,1128d1124
< 			/*
< 			pb->RefreshBDLogGG();
< 			os << '\t' << pb->logAbsBDPrior();
< 			*/


Check.cpp


Chrono.cpp


Clock.cpp
1124d1123
< 		// if (j != root->label)	{
1126d1124
< 		// }


Consensus.cpp


correlation.cpp


correl.cpp
79c79
< 		if (se[chain] > 1e-12)	{
---
> 		if (se[chain] > 1e-6)	{
84c84
< 	if (meanse[i] > 1e-12)	{
---
> 	if (meanse[i] > 1e-6)	{


CVrep.cpp


EM.cpp


fastreadthermo.cpp


GeneJacknife.cpp


JackBoot.cpp


JackGeneTaxa.cpp


JackTaxa.cpp


linalg.cpp


MakeConcat.cpp


MakeHisto.cpp


MakeRandomConcat.cpp


MakeRandomTree.cpp


MaskDistantOutgroup.cpp


MaxLikelihood.cpp


MCParameters.cpp
12,13c12,13
< 	Version = 4;
< 	SubVersion = 1;
---
> 	Version = 3;
> 	SubVersion = 3;
248c248
< 	SaveAllChains = 1;
---
> 	SaveAllChains = 0;
258d257
< 	GammaPrior = Cauchy;
264,265d262
< 	RRAlphaMin = 0.1;
< 	RRAlphaMax = 100;
3572,3635d3568
< 	double* rr = CustomRR;
< 
< 	if ((filename == "CGR10") || (filename == "cgr10"))	{
< 		double total = 0;
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i]= CG10RR[i];
< 			total += rr[i];
< 		}
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i] /= total / Nrr;
< 		}
< 	}
< 	else if ((filename == "CGR20") || (filename == "cgr20"))	{
< 		double total = 0;
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i]= CG20RR[i];
< 			total += rr[i];
< 		}
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i] /= total / Nrr;
< 		}
< 	}
< 	else if ((filename == "CGR30") || (filename == "cgr30"))	{
< 		double total = 0;
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i]= CG30RR[i];
< 			total += rr[i];
< 		}
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i] /= total / Nrr;
< 		}
< 	}
< 	else if ((filename == "CGR40") || (filename == "cgr40"))	{
< 		double total = 0;
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i]= CG40RR[i];
< 			total += rr[i];
< 		}
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i] /= total / Nrr;
< 		}
< 	}
< 	else if ((filename == "CGR50") || (filename == "cgr50"))	{
< 		double total = 0;
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i]= CG50RR[i];
< 			total += rr[i];
< 		}
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i] /= total / Nrr;
< 		}
< 	}
< 	else if ((filename == "CGR60") || (filename == "cgr60"))	{
< 		double total = 0;
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i]= CG60RR[i];
< 			total += rr[i];
< 		}
< 		for (int i=0; i<Nrr; i++)	{
< 			rr[i] /= total / Nrr;
< 		}
< 	}
< 	else	{
< 
3659d3591
< 	}
3922,4041d3853
< 	else if ((filename == "cgr10") || (filename == "CGR10") || (filename == "CG10") || (filename == "cg10"))	{
< 		Ncat = 10;
< 		statfix = new double*[Ncat];
< 		weight = new double[Ncat];
< 		for (int i=0; i<Ncat; i++)	{
< 			statfix[i] = new double[Nstate];
< 			double total = 0;
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] = CG10StatFix[i][k];
< 				if (statfix[i][k]<StatMin)	{
< 					statfix[i][k] = StatMin;
< 				}
< 				total += statfix[i][k];
< 			}
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] /= total;
< 			}
< 			weight[i] = CG10StatWeight[i];
< 		}
< 	}
< 	else if ((filename == "cgr20") || (filename == "CGR20") || (filename == "CG20") || (filename == "cg20"))	{
< 		Ncat = 20;
< 		statfix = new double*[Ncat];
< 		weight = new double[Ncat];
< 		for (int i=0; i<Ncat; i++)	{
< 			statfix[i] = new double[Nstate];
< 			double total = 0;
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] = CG20StatFix[i][k];
< 				if (statfix[i][k]<StatMin)	{
< 					statfix[i][k] = StatMin;
< 				}
< 				total += statfix[i][k];
< 			}
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] /= total;
< 			}
< 			weight[i] = CG20StatWeight[i];
< 		}
< 	}
< 	else if ((filename == "cgr30") || (filename == "CGR30") || (filename == "CG30") || (filename == "cg30"))	{
< 		Ncat = 30;
< 		statfix = new double*[Ncat];
< 		weight = new double[Ncat];
< 		for (int i=0; i<Ncat; i++)	{
< 			statfix[i] = new double[Nstate];
< 			double total = 0;
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] = CG30StatFix[i][k];
< 				if (statfix[i][k]<StatMin)	{
< 					statfix[i][k] = StatMin;
< 				}
< 				total += statfix[i][k];
< 			}
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] /= total;
< 			}
< 			weight[i] = CG30StatWeight[i];
< 		}
< 	}
< 	else if ((filename == "cgr40") || (filename == "CGR40") || (filename == "CG40") || (filename == "cg40"))	{
< 		Ncat = 40;
< 		statfix = new double*[Ncat];
< 		weight = new double[Ncat];
< 		for (int i=0; i<Ncat; i++)	{
< 			statfix[i] = new double[Nstate];
< 			double total = 0;
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] = CG40StatFix[i][k];
< 				if (statfix[i][k]<StatMin)	{
< 					statfix[i][k] = StatMin;
< 				}
< 				total += statfix[i][k];
< 			}
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] /= total;
< 			}
< 			weight[i] = CG40StatWeight[i];
< 		}
< 	}
< 	else if ((filename == "cgr50") || (filename == "CGR50") || (filename == "CG50") || (filename == "cg50"))	{
< 		Ncat = 50;
< 		statfix = new double*[Ncat];
< 		weight = new double[Ncat];
< 		for (int i=0; i<Ncat; i++)	{
< 			statfix[i] = new double[Nstate];
< 			double total = 0;
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] = CG50StatFix[i][k];
< 				if (statfix[i][k]<StatMin)	{
< 					statfix[i][k] = StatMin;
< 				}
< 				total += statfix[i][k];
< 			}
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] /= total;
< 			}
< 			weight[i] = CG50StatWeight[i];
< 		}
< 	}
< 	else if ((filename == "cgr60") || (filename == "CGR60") || (filename == "CG60") || (filename == "cg60"))	{
< 		Ncat = 60;
< 		statfix = new double*[Ncat];
< 		weight = new double[Ncat];
< 		for (int i=0; i<Ncat; i++)	{
< 			statfix[i] = new double[Nstate];
< 			double total = 0;
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] = CG60StatFix[i][k];
< 				if (statfix[i][k]<StatMin)	{
< 					statfix[i][k] = StatMin;
< 				}
< 				total += statfix[i][k];
< 			}
< 			for (int k=0; k<Nstate; k++)	{
< 				statfix[i][k] /= total;
< 			}
< 			weight[i] = CG60StatWeight[i];
< 		}
< 	}
4712c4524
< double MCParameters::MeanDifferentialDiversity(int* taxonmask )	{
---
> double MCParameters::MeanDifferentialDiversity(int* taxonmask)	{
4745c4557
< MCParameters::MeanDiversity (int* histo, double* tmp)	{
---
> MCParameters::MeanDiversity (int* histo)	{
4771,4773d4582
< 		if (tmp)	{
< 			tmp[i] = tot;
< 		}
7163a6973,6984
> 	if (param.Version >=3)	{
> 		os << param.ZipGTR << '\n';
> 		os << param.ZipPrior << '\n';
> 		os << param.ZipGTRDP << '\n';
> 		os << param.NZipModeMax << '\n';
> 		os << param.ModePoisson << '\n';
> 		if (param.PopEff)	{
> 			os << 10 << '\n';
> 		}
> 		else	{
> 			os << param.NHPrior << '\n';
> 		}
7165,7174c6986,6993
< 	os << param.ZipGTR << '\n';
< 	os << param.ZipPrior << '\n';
< 	os << param.ZipGTRDP << '\n';
< 	os << param.NZipModeMax << '\n';
< 	os << param.ModePoisson << '\n';
< 	if (param.PopEff)	{
< 		os << 10 << '\n';
< 	}
< 	else	{
< 		os << param.NHPrior << '\n';
---
> 		// specific to version 3.3
> 		os << param.PopEff << '\n';
> 		os << param.NHPop << '\n';
> 		os << param.FixRoot << '\n';
> 
> 		os << param.MBL << '\n';
> 		os << param.NMixBLMax << '\n';
> 		os << param.IncrementalMixBLDP << '\n';
7176,7185d6994
< 
< 	// specific to version 3.3
< 	os << param.PopEff << '\n';
< 	os << param.NHPop << '\n';
< 	os << param.FixRoot << '\n';
< 
< 	os << param.MBL << '\n';
< 	os << param.NMixBLMax << '\n';
< 	os << param.IncrementalMixBLDP << '\n';
< 
7218d7026
< 	os << param.GammaPrior << '\n';
8063,8397d7870
< 	else if (param.Version >= 4)	{
< 
< 		// data file
< 		is >> param.DataFileSpec;
< 		is >> param.ContDataFileSpec;
< 
< 
< 		// model specifications
< 		is >> param.NormalApprox;
< 		is >> param.NormalConcMode;
< 		is >> param.ClockModel;
< 		is >> param.WithPartial;
< 		is >> param.FlexClockModel;
< 		is >> param.ActivateClock;
< 		is >> param.SeparateRhoPrior;
< 
< 		is >> param.NH;
< 		is >> param.DeleteConstant;
< 		is >> param.Normalise;
< 		is >> param.NormaliseCov;
< 		is >> param.ModeFastCompute;
< 
< 		is >> param.ZipGTR;
< 		is >> param.ZipPrior;
< 		is >> param.ZipGTRDP;
< 		is >> param.NZipModeMax;
< 		is >> param.ModePoisson;
< 		is >> param.NHPrior;
< 		if (param.NHPrior == 10)	{
< 			param.NHPrior = 0;
< 			param.PopEff = 1;
< 		}
< 
< 		// specific to version 3.3
< 		is >> param.PopEff;
< 		is >> param.NHPop;
< 		is >> param.FixRoot;
< 
< 		is >> param.MBL;
< 		is >> param.NMixBLMax;
< 		is >> param.IncrementalMixBLDP;
< 
< 		is >> param.RefFastCompute;
< 		is >> param.Parallel;
< 		is >> param.NHNcatMax;
< 		is >> param.ExternalCov;
< 		is >> param.Ngen;
< 		is >> param.SaveStat;
< 		is >> param.SaveAll;
< 
< 		is >> param.NmodeMax;
< 		is >> param.NRateModeMax;
< 		is >> param.GammaNcat;
< 		is >> param.ActivateSumOverModes;
< 		is >> param.SumOverModes;
< 		is >> param.ActivateSumOverRateModes;
< 		is >> param.SumOverRateModes;
< 		is >> param.Qmode;
< 		is >> param.GeneBLMode;
< 		is >> param.GeneBLMultiplier;
< 		is >> param.GeneRateMode;
< 		is >> param.GeneGammaMode;
< 		is >> param.GeneStationaryMode;
< 
< 		is >> param.LengthPrior;
< 		is >> param.LengthMin;
< 		is >> param.LengthMax;
< 
< 		is >> param.RatePrior;
< 		is >> param.RateMin;
< 		is >> param.RateMax;
< 		is >> param.GammaMin;
< 		is >> param.GammaMax;
< 		is >> param.XiMin;
< 		is >> param.XiMax;
< 		is >> param.GammaPrior;
< 
< 		is >> param.ModePrior;
< 		is >> param.ModeStatPrior;
< 		is >> param.StatMin;
< 		is >> param.StatMax;
< 		is >> param.StatAlphaMin;
< 		is >> param.StatAlphaMax;
< 
< 		is >> param.AlphaPrior;
< 		is >> param.AlphaMin;
< 		is >> param.AlphaMax;
< 
< 		is >> param.TooSmall;
< 		is >> param.TooLarge;
< 		is >> param.InfProb;
< 		is >> param.OutNtaxa;
< 		if (param.OutNtaxa)	{
< 			param.OutGroup = new string[param.OutNtaxa];
< 			for (int i=0; i<param.OutNtaxa; i++)	{
< 				is >> param.OutGroup[i];
< 			}
< 		}
< 		if (param.NormalApprox == Yes)	{
< 			int tmp;
< 			is >> tmp;
< 			if (tmp)	{
< 				string temp;
< 				is >> temp;
< 				param.ReadCov(temp);
< 			}
< 			is >> tmp;
< 			if (tmp)	{
< 				string temp;
< 				is >> temp;
< 				param.ReadSepCov(temp);
< 			}
< 			param.RegisterCov();
< 		}
< 		else	{
< 			param.ReadDataFromFile(param.DataFileSpec);
< 
< 			is >> param.Recoding;
< 			if (param.Recoding)	{
< 				is >> param.Nstate;
< 				is >> param.RecodingNstate;
< 				param.RecodingTable = new int[param.Nstate];
< 				for (int i=0; i<param.Nstate; i++)	{
< 					is >> param.RecodingTable[i];
< 				}
< 				param.RecodingAlphabet = new char[param.RecodingNstate];
< 				for (int i=0; i<param.RecodingNstate; i++)	{
< 					is >> param.RecodingAlphabet[i];
< 				}
< 			}
< 
< 			param.RegisterWithData();
< 
< 			is >> param.Ngene;
< 			delete[] param.Gene;
< 			delete[] param.GeneSize;
< 			delete[] param.GeneFirstSite;
< 			param.GeneSize = new int[param.Ngene];
< 			param.GeneFirstSite = new int[param.Ngene];
< 			param.Gene = new int[param.Nsite];
< 
< 			for (int i=0; i<param.Ngene; i++)	{
< 				is >> param.GeneSize[i];
< 				is >> param.GeneFirstSite[i];
< 			}
< 			for (int i=0; i<param.Nsite; i++)	{
< 				is >> param.Gene[i];
< 			}
< 			if (param.ContDataFileSpec != "None")	{
< 				param.ReadContDataFromFile(param.ContDataFileSpec);
< 			}	
< 		}
< 
< 		is >> param.NCalib;
< 		if (param.NCalib)	{
< 			param.isCalibrated = new int[param.Nnode];
< 			for (int j=0; j<param.Nnode; j++)	{
< 				param.isCalibrated[j] = 0;
< 			}
< 			param.CalibTaxon1 = new string[param.NCalib];
< 			param.CalibTaxon2 = new string[param.NCalib];
< 			param.CalibIndex = new int[param.NCalib];
< 			param.CalibUpper = new double[param.NCalib];
< 			param.CalibLower = new double[param.NCalib];
< 			for (int i=0; i<param.NCalib; i++)	{
< 				is >> param.CalibTaxon1[i] >> param.CalibTaxon2[i] >> param.CalibIndex[i] >> param.CalibUpper[i] >> param.CalibLower[i];
< 				/*
< 				if (param.CalibIndex[i] <0)	{
< 					cerr << "negative index\n";
< 					exit(1);
< 				}
< 				if (param.CalibIndex[i] >= param.Nnode)	{
< 					cerr << "index overflow\n";
< 					exit(1);
< 				}
< 				cerr << param.CalibIndex[i] << '\n';
< 				cerr << "ok\n";
< 				*/
< 				param.isCalibrated[param.CalibIndex[i]] = 1;
< 			}
< 		}
< 
< 		is >> param.SaveEvery;
< 		is >> param.StopAfter;
< 		is >> param.HowManySaved;
< 		is >> param.SwapFreq;
< 
< 		is >> param.BurnIn;
< 		is >> param.InitBeta;
< 		is >> param.FinalBeta;
< 		is >> param.BetaStep;
< 		is >> param.BurnInDone;
< 		is >> param.Beta0;
< 		is >> param.Nchain;
< 
< 		for (int l=0; l<param.Nchain; l++)	{
< 			is >> param.Beta[l];
< 		}
< 
< 		param.SwapPermut = new int[param.Nchain];
< 		for (int i=0; i<param.Nchain; i++)	{
< 			is >> param.SwapPermut[i];
< 		}
< 
< 		is >> param.MSMode;
< 		is >> param.RASModelSwitch;
< 		is >> param.SUBModelSwitch;
< 		is >> param.SeparateModelSwitch;
< 		is >> param.HeteroModelSwitch;
< 		is >> param.FlexClockModelSwitch;
< 		is >> param.BLModelSwitch;
< 
< 		is >> param.HeteroMode;
< 
< 		// chain parameters
< 
< 		is >> param.TopoMoveTypeNumber;
< 		for (int k=0; k<param.TopoMoveTypeNumber; k++)	{
< 			is >> param.TopoMoveTypeArray[k];
< 			is >> param.SuperMoveTypeNumber[k];
< 			for (int l=0; l<param.Nchain; l++)	{
< 				is >> param.TopoNIterationArray[k][l];
< 				is >> param.TopoNArray[k][l];
< 			}
< 			for (int i=0; i<param.SuperMoveTypeNumber[k]; i++)	{
< 				is >> param.MoveTypeNumber[k][i];
< 				for (int l=0; l<param.Nchain; l++)	{
< 					is >> param.SuperNIterationArray[k][i][l];
< 				}
< 				for (int j=0; j<param.MoveTypeNumber[k][i]; j++)	{
< 					is >> param.MoveTypeArray[k][i][j];
< 					for (int l=0; l<param.Nchain; l++)	{
< 						is >> param.deltaArray[k][i][j][l];
< 						is >> param.NIterationArray[k][i][j][l];
< 						is >> param.NArray[k][i][j][l];
< 					}
< 				}
< 			}
< 		}
< 
< 		// chain statistics
< 
< 		is >> param.RateInfCount;
< 		is >> param.StatInfCount;
< 		is >> param.LengthInfCount;
< 		is >> param.LogProbInfCount;
< 		is >> param.SubOverflowCount;
< 
< 
< 		for (int k=0; k<param.TopoMoveTypeNumber; k++)	{
< 			for (int i=0; i<param.SuperMoveTypeNumber[k]; i++)	{
< 				for (int l=0; l<param.MoveTypeNumber[k][i]; l++)	{
< 					for (int m=0; m<param.Nchain; m++)	{
< 						is >> param.NCallArray[k][i][l][m];
< 						is >> param.SuccessArray[k][i][l][m];
< 						is >> param.TimeArray[k][i][l][m];
< 					}
< 				}
< 			}
< 		}
< 		for (int m=0; m<param.Nchain; m++)	{
< 			is >> param.TrialSwapArray[m];
< 			is >> param.AcceptedSwapArray[m];
< 		}
< 
< 
< 		is >> param.FixGamma;
< 		is >> param.FixMeanLength;
< 		is >> param.FixStatCenter;
< 		is >> param.FixStat;
< 		is >> param.FixRR;
< 		is >> param.FixLength;
< 		is >> param.FixRate;
< 		is >> param.FixNmode;
< 		is >> param.FixTopo;
< 		is >> param.FixPconst;
< 		is >> param.TimePrior;
< 		is >> param.ClockPriorModelSwitch;
< 		is >> param.AutoCorrelModelSwitch;
< 		is >> param.ArcThermo;
< 		is >> param.alpha1;
< 		is >> param.alpha2;
< 		is >> param.Zeta;
< 		is >> param.logBF;
< 		is >> param.logBFmin;
< 		is >> param.logBFmax;
< 		is >> param.logBFrev;
< 		is >> param.logBFminrev;
< 		is >> param.logBFmaxrev;
< 		is >> param.BFcount;
< 		is >> param.ScalePrior;
< 		is >> param.MeanScale;
< 		is >> param.MutMode;
< 		is >> param.SelMode;
< 
< 		is >> param.SoftBounds;
< 		is >> param.Softa;
< 		is >> param.VarScale;
< 		is >> param.ImproperLowerBound;
< 		is >>  param.LowerC;
< 		is >>  param.LowerP;
< 
< 		is >> param.AlphaChi;
< 		is >> param.BetaChi;
< 		is >> param.AlphaChi2;
< 		is >> param.BetaChi2;
< 
< 		is >> param.ZipSub;
< 		is >> param.LengthGammaPrior;
< 		
< 		int cont;
< 
< 		is >> cont;
< 		if (cont)	{
< 			is >> param.ModeStatAlphaPrior;
< 			// cerr << param.ModeStatAlphaPrior << '\n';
< 			is >> cont;
< 			if (cont)	{
< 				cerr << "error in MCParameters::icstream\n";
< 				exit(1);
< 			}
< 		}
< 
< 		// current state
< 		int tmp = param.SaveAll;
< 		param.SaveAll = 1;
< 		param.currentState = new PhyloBayes*[param.Nchain];
< 		param.nextState = new PhyloBayes*[param.Nchain];
< 		for (int chain = 0; chain < param.Nchain; chain++)	{
< 			param.currentState[chain] = new PhyloBayes(&param);
< 			param.nextState[chain] = new PhyloBayes(&param);
< 			is >> *param.currentState[chain];
< 		}
< 		param.SaveAll = tmp;
< 	}
9016d8488
< 


Misc.cpp


ML.cpp


Move.cpp
1736d1735
< 	/*
1742d1740
< 	*/
1745,1755c1743
< 		for (int n=0; n<NHNcat; n++)	{
< 		int j = 0;
< 		while ((j<mParam->Nnode) && (NHcat[j] != n))	{
< 			j++;
< 		}
< 		if (j == mParam->Nnode)	{
< 			cerr << "error in logNHStat Prior\n";
< 			exit(1);
< 		}
< 		if (mParam->FixStat || (!tree[j].isRoot()))	{
< 		// for (int n=firstcat; n<NHNcat; n++)	{
---
> 		for (int n=firstcat; n<NHNcat; n++)	{
1786d1773
< 		}
1799c1786
< 	return ((double) NAccepted) / nrep / NHNcat;
---
> 	return ((double) NAccepted) / nrep / (NHNcat - firstcat);
8958d8944
< 		// Accepted = ((-log(Random::Uniform()) > logRatio) && (gamma > mParam->GammaMin) && (gamma < mParam->GammaMax));
9007c8993
< 	double deltaLogPrior = -logGammaPrior();
---
> 	double deltaLogPrior = -gamma;
9018c9004
< 	deltaLogPrior += logGammaPrior();
---
> 	deltaLogPrior += gamma;
9030d9015
< 	// int Accepted = ((-log(Random::Uniform()) > logRatio) && (gamma > mParam->GammaMin) && (gamma < mParam->GammaMax));
9970c9955
< 		Accepted = ((RRAlpha > mParam->RRAlphaMin) && (RRAlpha < mParam->RRAlphaMax) && (- log(Random::Uniform())  > logRatio));
---
> 		Accepted = (- log(Random::Uniform())  > logRatio);
10005c9990
< 		Accepted = ((RRAlpha > mParam->RRAlphaMin) && (RRAlpha < mParam->RRAlphaMax) && (- log(Random::Uniform())  > logRatio));
---
> 		Accepted = (- log(Random::Uniform())  > logRatio);
11397d11381
< 				// UpdateModeNH(i);
11646,11648d11629
< 			double** logtmp = NHLogStationary[mode1];
< 			NHLogStationary[mode1] = NHLogStationary[mode2];
< 			NHLogStationary[mode2] = logtmp;


mystream.cpp


mystring.cpp


PB.cpp
140d139
< 	int gammaprior = 2;	 // 0: cauchy; 1:exponential 2: log-uniform
173c172
< 				cerr << "phylobayes version 3.3c\n";
---
> 				cerr << "phylobayes version 3.3f\n";
281c280
< 			else if ((s == "-rrgam") || (s == "-lgcentered"))	{
---
> 			else if (s == "-rrgam")	{
816,824d814
< 			else if (s == "-cauchyalpha")	{
< 				gammaprior = 0;
< 			}
< 			else if (s == "-expalpha")	{
< 				gammaprior = 1;
< 			}
< 			else if (s == "-logunialpha")	{
< 				gammaprior = 2;
< 			}
873,876d862
< 				if (((statfix[0] == 'c') && (statfix[1] == 'g') && (statfix[2] == 'r')) || ((statfix[0] == 'C') && (statfix[1] == 'G') && (statfix[2] == 'R')))	{
< 					rr = custom;
< 					rrfile = statfix;
< 				}
1172c1158
< 	os << "phylobayes version 4.1\n";
---
> 	os << "phylobayes version 3.3f\n";
1206,1216d1191
< 	if (gammaprior == 0)	{
< 		mParam->GammaPrior = Cauchy;
< 	}
< 	else if (gammaprior == 1)	{
< 		mParam->GammaPrior = Exponential;
< 	}
< 	else if (gammaprior == 2)	{
< 		mParam->GammaPrior = PowerLaw;
< 	}
< 	
< 
1300d1274
< 	/*
1304d1277
< 	*/
1341d1313
< 		os << "WARNING: using this option will remove constant sites but will not correct the likelihood for this selection bias.\n";


PhyloBayes.cpp
18,19c18,19
< 	Version = 4;
< 	SubVersion = 1;
---
> 	Version = 3;
> 	SubVersion = 3;
5321,5341d5320
< //		 GetMeanBranchStat()
< // ---------------------------------------------------------------------------
< 
< void PhyloBayes::GetMeanBranchStat(double* avstat, int j)	{
< 
< 	for (int k=0; k<Nstate; k++)	{
< 		avstat[k] = 0;
< 	}
< 	for (int i=0; i<Nmode; i++)	{
< 		double* stat = NHStationary[i][NHcat[j]];
< 		double weight = SiteNumber[i];
< 		for (int k=0; k<Nstate; k++)	{
< 			avstat[k] += weight * stat[k];
< 		}
< 	}
< 	for (int k=0; k<Nstate; k++)	{
< 		avstat[k] /= mParam->Nsite;
< 	}
< }
< 
< // ---------------------------------------------------------------------------
5791,5846d5769
< double PhyloBayes::GetFiniteTimeEntropy(double time, int mode)	{
< 
< 
< 	UpdateMode(mode);
< 
< 	double meanent = 0;
< 
< 	double** temp = new double*[Nstate];
< 	for (int i=0; i<Nstate; i++)	{
< 		temp[i] = new double[Nstate];
< 	}
< 
< 	if (mParam->ModeFastCompute)	{
< 		
< 		for (int k=0; k<Nstate; k++)	{
< 			for (int l=0; l<Nstate; l++)	{
< 				temp[k][l] = (1 - exp(-time)) * Stationary[mode][l];
< 				if (k == l)	{
< 					temp[k][l] += exp(-time);
< 				}
< 			}
< 		}
< 	}
< 	else	{
< 
< 		mMatrixArray[mode]->ComputeExponential(time,temp);
< 		
< 	}
< 
< 	for (int k=0; k<Nstate; k++)	{
< 		double ent = 0;
< 		for (int l=0; l<Nstate; l++)	{
< 			ent -= temp[l][k] * log(temp[l][k]);
< 		}
< 		meanent += Stationary[mode][k] * ent;
< 	}
< 
< 	for (int i=0; i<Nstate; i++)	{
< 		delete[] temp[i];
< 	}
< 	delete[] temp;
< 
< 	return meanent;
< }
< 
< double PhyloBayes::GetFiniteTimeEntropy(double time)	{
< 
< 	double mean = 0;
< 	for (int mode=0; mode<Nmode; mode++)	{
< 		mean += GetFiniteTimeEntropy(time,mode);
< 	}
< 	mean /= Nmode;
< 	return mean;
< }
< 
< 
6211c6134
< double PhyloBayes::NTrueSubPerSite(double* tmp)	{
---
> double PhyloBayes::NTrueSubPerSite()	{
6216d6138
< 		double tot = 0;
6218,6222c6140
< 			tot += nsub[i][k];
< 		}
< 		total += tot;
< 		if (tmp)	{
< 			tmp[i] = tot;
---
> 			total += nsub[i][k];
8270,8575c8188
< 	// CURRENT VERSION
< 	else if (state.Version >= 4)	{
< 
< 		is >> state.Beta;
< 
< 		// tree
< 		AmphiNode* p =state.tree;
< 		for (int i=0; i< state.mParam->Nnode; i++)	{
< 			int s;
< 			is >> s;
< 			p->up = (s == -1) ? 0 : &state.tree[s];
< 			is >> s;
< 			p->left = (s == -1) ? 0 : &state.tree[s];
< 			is >> s;
< 			p->right = (s== -1) ? 0 : &state.tree[s];
< 			is >> p->branchLength;
< 			p++;
< 		}
< 		int rootlabel;
< 		is >> rootlabel;
< 		state.root = & state.tree[rootlabel];
< 
< 		for (int j=0; j<state.mParam->Nnode; j++)	{
< 			is >> state.BL[j];
< 			is >> state.RigidBL[j];
< 		}
< 		if (state.mParam->MBL)	{
< 			is >> state.MixBLAlpha;
< 			is >> state.NMixBL;
< 			for (int i=0; i<state.NMixBL; i++)	{
< 				for (int j=0; j<state.mParam->Nnode; j++)	{
< 					is >>state.MixBL[i][j];
< 				}
< 				state.MixBLSiteNumber[i] = 0;
< 			}
< 			for (int i=0; i<state.mParam->Nsite; i++)	{
< 				is >> state.MixBLMode[i];
< 			}
< 		}
< 		if (!state.mParam->SaveAll)	{
< 			is >> state.MeanLength;
< 			is >> state.gamma;
< 			is >> state.pconst;
< 			is >> state.alpha;
< 			is >> state.Nmode;
< 			is >> state.xi0;
< 			is >> state.invprob;
< 			is >> state.Sigma;
< 			is >> state.Theta;
< 			is >> state.Mu;
< 			is >> state.Scale;
< 			is >> state.mLogPrior;
< 			is >> state.mLogSampling;
< 		}
< 		else	{
< 			for (int i=0; i<state.mParam->Ngene; i++)	{
< 				for (int j=0; j<state.mParam->Nnode; j++)	{
< 					is >> state.GeneBL[i][j];
< 					is >> state.GeneRigidBL[i][j];
< 				}
< 			}
< 
< 			is >> state.MeanLength;
< 			is >> state.VarLength;
< 			is >> state.LengthGamma;
< 
< 			if (state.mParam->NormalApprox == No)	{
< 
< 				// rate
< 				for (int i=0; i<state.mParam->Nsite; i++)	{
< 					is >> state.rate[i];
< 				}
< 				is >> state.gamma;
< 				is >> state.pconst;
< 
< 				// gene
< 				for (int i=0; i<state.mParam->Ngene; i++)	{
< 					is >> state.GeneGamma[i];
< 					is >> state.GeneRate[i];
< 					for (int j=0; j<state.Nstate; j++)	{
< 						is >> state.GeneStationary[i][j];
< 					}
< 				}
< 
< 				// ref
< 				for (int i=0; i<state.Nstate; i++)	{
< 					is >> state.RefStationary[i];
< 				}
< 				for (int i=0; i<state.Nstate*(state.Nstate-1)/2; i++)	{
< 					is >> state.RefRR[i];
< 				}
< 
< 				// mode
< 				is >> state.alpha;
< 				is >> state.Nmode;
< 				for (int i=0; i<state.Nmode; i++)	{
< 					if (state.mParam->SaveStat)	{
< 						double total = 0;
< 						for (int j=0; j<state.Nstate; j++)	{
< 							is >> state.Stationary[i][j];
< 							total += state.Stationary[i][j];
< 						}
< 						for (int j=0; j<state.Nstate; j++)	{
< 							state.Stationary[i][j] /= total;
< 						}
< 					}
< 					if (state.mParam->Qmode)	{
< 						for (int j=0; j<state.Nstate*(state.Nstate-1)/2; j++)	{
< 							is >> state.RR[i][j];
< 						}
< 					}			
< 					is >> state.ModeWeight[i];
< 				}
< 				if (! state.mParam->SaveStat)	{
< 					is >> state.mStationaryEntropy;
< 				}
< 
< 				for (int i=0; i<state.Nstate*(state.Nstate-1)/2; i++)	{
< 					is >> state.ModeRR[i];
< 				}
< 
< 				for (int i=0; i<state.Nstate; i++)	{
< 					is >> state.ModeStatCenter[i];
< 				}
< 				is >> state.ModeStatAlpha;
< 
< 				for (int i=0; i<state.mParam->Nsite; i++)	{
< 					is >> state.Mode[i];
< 				}
< 				// ratemode
< 				is >> state.NRateMode;
< 				for (int i=0; i<state.NRateMode; i++)	{
< 					is >> state.ModeRate[i];
< 					is >> state.RateModeWeight[i];
< 				}
< 				for (int i=0; i<state.mParam->Nsite; i++)	{
< 					is >> state.RateMode[i];
< 				}
< 				is >> state.RateAlpha;
< 
< 				// log probs
< 				is >> state.mLogPrior;
< 				is >> state.mLogSampling;
< 				state.mLogPosterior = state.mLogPrior + state.Beta * state.mLogSampling;
< 
< 				if ( state.mParam->SavePartialLogLikelihoods)	{
< 					double temp = 0;
< 					for (int i=0; i<state.mParam->Nsite; i++)	{
< 						is >> state.mSiteLogSampling[i];
< 						temp += state.mSiteLogSampling[i];
< 					}
< 					if (temp != state.mLogSampling)	{
< 						cerr << "warning : partial likelihoods non concordant with total logsampling advertised in this file\n";
< 					}
< 				}
< 			
< 				// hetero
< 				is >> state.xi0;
< 				is >> state.invprob;
< 
< 			}
< 			else	{ // normal approx
< 
< 				is >> state.mLogPrior;
< 				is >> state.mLogSampling;
< 				state.mLogPosterior = state.mLogPrior + state.Beta *  state.mLogSampling;
< 
< 			}
< 			if (state.mParam->ActivateClock)	{
< 				is >> state.Sigma;
< 				is >> state.Theta;
< 				is >> state.Chi;
< 				is >> state.Chi2;
< 				/*	
< 				is >> state.MulSigma;
< 				is >> state.MulTheta;
< 				*/
< 				is >> state.MeanSigma;
< 				is >> state.MeanTheta;
< 				is >> state.VarSigma;
< 				is >> state.VarTheta;
< 				is >> state.Mu;
< 				is >> state.Scale;
< 				is >> state.VarScale;
< 				if (state.mParam->ContNchar)	{
< 					for (int k=0; k<state.mParam->ContNchar+1; k++)	{
< 						for (int j=0; j<state.mParam->Nnode; j++)	{
< 							is >> state.ContRho[k][j];
< 						}
< 						is >> state.ContRhoCenter[k];
< 					}
< 				}
< 				else	{
< 					for (int j=0; j<state.mParam->Nnode; j++)	{
< 						is >> state.Rho[j];
< 					}
< 				}
< 				for (int k=0; k<state.mParam->Ngene; k++)	{
< 					for (int j=0; j<state.mParam->Nnode; j++)	{
< 						is >> state.GeneRho[k][j];
< 					}
< 					is >> state.GeneSigma[k];
< 					is >> state.GeneTheta[k];
< 					is >> state.GeneMu[k];
< 				}
< 			}
< 		}
< 
< 		if ((state.mParam->ZipGTR) && (state.mParam->ZipGTR != 4))	{
< 			is >> state.ZipAlpha;
< 			is >> state.ZipRate;
< 			is >> state.NZipMode;
< 			for (int i=0; i<state.mParam->Nsite; i++)	{
< 				is >> state.ZipMode[i];
< 			}
< 			for (int k=0; k<state.Nstate; k++)	{
< 				is >> state.ModeZipProb[k];
< 				is >> state.ZipA0[k];
< 				is >> state.ZipA1[k];
< 			}
< 			if (state.mParam->ZipGTR == 1)	{
< 				for (int i=0; i<state.Nmode; i++)	{
< 					for (int k=0; k<state.Nstate; k++)	{
< 						is >> state.ModeAASupport[i][k];
< 					}
< 				}
< 			}
< 			else if ((state.mParam->ZipGTR >= 2) && (state.mParam->ZipGTRDP))	{
< 				for (int i=0; i<state.NZipMode; i++)	{
< 					for (int k=0; k<state.Nstate; k++)	{
< 						is >> state.ModeAASupport[i][k];
< 					}
< 				}
< 			}
< 			else	{
< 				for (int i=0; i<state.mParam->Nsite; i++)	{
< 					for (int k=0; k<state.Nstate; k++)	{
< 						is >> state.SiteAASupport[i][k];
< 					}
< 				}
< 			}
< 		}
< 
< 		if (state.mParam->NH)	{
< 			is >> state.NHNcat;
< 			for (int j=0; j<state.mParam->Nnode; j++)	{
< 				is >> state.NHcat[j];
< 			}
< 			for (int n=0; n<state.NHNcat; n++)	{
< 				is >> state.NHWeight[n];
< 				for (int k=0; k<state.mParam->Nstate; k++)	{
< 					is >>state.NHStatDistorter[n][k];
< 				}
< 				if (state.mParam->NHPrior)	{
< 					for (int k=0; k<state.ContNstate; k++)	{
< 						is >>state.logNHStatDistorter[n][k];
< 					}
< 				}
< 			}
< 			is >> state.NHpswitch;
< 			is >> state.NHStatAlpha;
< 			for (int k=0; k<state.ContNstate; k++)	{
< 				is >> state.NHStatCenter[k];
< 			}
< 			if (state.mParam->NHPrior)	{
< 				for (int k=0; k<state.mParam->ContNchar+1; k++)	{
< 					is >> state.NHContVar[k];
< 				}
< 				for (int k=0; k<state.ContNstate; k++)	{
< 					is >> state.NHVar[k];
< 				}
< 				if (state.mParam->NHPrior == 2)	{
< 					for (int k=0; k<state.ContNrr; k++)	{
< 						is >> state.NHCovIndex[k];
< 					}
< 				}
< 			}	
< 		}
< 		if (state.mParam->Qmode)	{
< 			is >> state.RRAlpha;
< 		}
< 
< 		is >> state.GWf;
< 
< 		if (state.mParam->PopEff)	{
< 			is >> state.PopAlpha;
< 			is >> state.PopBeta;
< 			for (int j=0; j<state.NHNcat; j++)	{
< 				is >> state.PopEffSize[j];
< 			}
< 		}
< 		if (state.mParam->MutMode == 2)	{
< 			is >> state.Kappa;
< 			for (int i=0; i<Nnuc; i++)	{
< 				is >> state.RefACGT[i];
< 			}
< 		}
< 		if (state.mParam->MutMode == 3)	{
< 			for (int i=0; i<Nnuc; i++)	{
< 				is >> state.RefACGT[i];
< 			}
< 			for (int i=0; i<Nnuc * (Nnuc-1) / 2; i++)	{
< 				is >> state.RefRRACGT[i];
< 			}
< 		}
< 	}
---
> 	// CURRENT VERSION (thus far identical to 3.1)
9936,9937c9549
< 	InitRefRR = LG;
< 	// InitRefRR = Uniform;
---
> 	InitRefRR = Uniform;
10095d9706
< 					//	cerr << Stationary[mode][k] << '\t';
10097d9707
< 					// cerr << '\n';
10322d9931
< 
10731,10746c10340
< 			if (mParam->GammaPrior == Exponential)	{
< 				gamma = Random::sExpo();
< 			}
< 			else if (mParam->GammaPrior == PowerLaw)	{
< 				double x = log(mParam->GammaMin) + (log(mParam->GammaMax) - log(mParam->GammaMin)) * Random::Uniform();
< 				gamma = exp(x);
< 			}
< 			else if (mParam->GammaPrior == Cauchy)	{
< 				double x = Random::sExpo();
< 				double y = Random::sExpo();
< 				gamma = x / y;
< 			}
< 			else	{
< 				cerr << "error: prior on alpha parameter not recognized\n";
< 				exit(1);
< 			}
---
> 			gamma = Random::sExpo();


PhyloEM.cpp


PhyloProbs.cpp
60c60
< 			mLogPrior += logGammaPrior();
---
> 			mLogPrior += gamma;
129,147d128
< double PhyloBayes::logGammaPrior()	{
< 
< 	if (mParam->GammaPrior == PowerLaw)	{
< 		if ((gamma < mParam->GammaMin) || (gamma > mParam->GammaMax))	{
< 			return mParam->InfProb;
< 		}
< 		return log(gamma);
< 	}
< 	else if (mParam->GammaPrior == Cauchy)	{
< 		return log(1 + gamma*gamma);
< 	}
< 	else if (mParam->GammaPrior == Exponential)	{
< 		return gamma;
< 	}
< 	else	{
< 		cerr << "error: prior on alpha parameter not recognized\n";
< 		exit(1);
< 	}
< }
407,408c388
< 	return log(1 + RRAlpha * RRAlpha);
< 	// return log(RRAlpha);
---
> 	return RRAlpha;
564,575d543
< 		// root is the exception
< 		int j = 0;
< 		while ((j<mParam->Nnode) && (NHcat[j] != n))	{
< 			j++;
< 		}
< 		if (j == mParam->Nnode)	{
< 			cerr << "error in logNHStat Prior\n";
< 			exit(1);
< 		}
< 		if (tree[j].isRoot())	{
< 			return 0;
< 		}
1232d1199
< 		// return alpha;
1235,1236d1201
< 	// jeffreys prior ?
< 	// return -log(alpha);
3406,3444d3370
< double PhyloBayes::GetSumModeLogSampling()	{
< 
< 	UpdateSiteNumber();
< 	double* weight = new double[Nmode];
< 	double total = 0;
< 	for (int mode=0; mode<Nmode; mode++)	{
< 		weight[mode] = Random::sGamma(1 + SiteNumber[mode]);
< 		total += weight[mode];
< 	}
< 	for (int mode=0; mode<Nmode; mode++)	{
< 		weight[mode] /= total;
< 	}
< 	double lnl = 0;
< 	for (int i=0; i<mParam->Nsite; i++)	{
< 		lnl += GetSumModeSiteLogSampling(i,weight);
< 	}
< 	delete[] weight;
< 	return lnl;
< }
< 
< double PhyloBayes::GetSumModeSiteLogSampling(int site, double* weight)	{
< 
< 	double min = 0;
< 	double lnl[Nmode];
< 	for (int mode=0; mode<Nmode; mode++)	{
< 		SetMode(site,mode);
< 		lnl[mode] = SiteLogSampling(site);
< 		if ((!mode) || (min > lnl[mode]))	{
< 			min = lnl[mode];
< 		}
< 	}
< 	double total = 0;
< 	for (int mode=0; mode<Nmode; mode++)	{
< 		total += weight[mode] * exp(min - lnl[mode]);
< 	}
< 	return min - log(total);
< }
< 
< 
3911,4131d3836
< double PhyloBayes::ConstantSiteCorrection(double rho, double& meanpv)	{
< 
< 	double deltalogl = 0;
< 	meanpv = 0;
< 
< 	// create arrays for constant site calculations
< 	double** conslogl = new double*[NRateMode];
< 	for (int k=0; k<NRateMode; k++)	{
< 		conslogl[k] = new double[Nstate];
< 	}
< 
< 	if (! mParam->ModeFastCompute)	{
< 
< 		for (int i=0; i<mParam->Nsite; i++)	{
< 
< 			// likelihood such as sampled by the mcmc
< 			double sampledlogl = SiteLogSampling(i);
< 
< 			// attempt a correction of branch lengths
< 			for (int j=0; j<mParam->Nnode; j++)	{
< 				BL[j] *= rho;
< 			}
< 
< 			// backup data
< 			int* bkdata = new int[mParam->Ntaxa];
< 			for (int j=0; j<mParam->Ntaxa; j++)	{
< 				bkdata[j] = Data[j][i];
< 			}
< 
< 			// compute probability of each possible constant pattern
< 			for (int l=0; l<Nstate; l++)	{
< 				for (int j=0; j<mParam->Ntaxa; j++)	{
< 					if (Data[j][i] != unknown)	{
< 						Data[j][i] = l;
< 					}
< 				}
< 				SiteLogSampling(i);
< 				for (int k=0; k<NRateMode; k++)	{
< 					conslogl[k][l] = mRateModeSiteLogSampling[k][i];
< 				}
< 			}
< 			
< 			// restore data
< 			for (int j=0; j<mParam->Ntaxa; j++)	{
< 				Data[j][i] = bkdata[j];
< 			}
< 			delete[] bkdata;
< 
< 			// compute corrected likelihood
< 			SiteLogSampling(i);
< 
< 			// -log prob (not constant)
< 			double logpv[NRateMode];
< 
< 			for (int k=0; k<NRateMode; k++)	{
< 				double min = 0;
< 				for (int l=0; l<Nstate; l++)	{
< 					if ((!l) || (min > conslogl[k][l]))	{
< 						min = conslogl[k][l];
< 					}
< 				}
< 				double tot = 0;
< 				for (int l=0; l<Nstate; l++)	{
< 					tot += exp(min - conslogl[k][l]);
< 				}
< 
< 				// log prob of producing a constant site given the rate
< 				double tmp = min - log(tot);
< 				// prob const
< 				double pc = exp(-tmp);
< 				// prob var
< 				double pv = 1 - pc;
< 				meanpv += pv;
< 				// -log prob var
< 				logpv[k] = -log(pv);
< 			}
< 
< 			double min0 = 0;
< 			for (int k=0; k<NRateMode; k++)	{
< 				double truelogl = mRateModeSiteLogSampling[k][i] - logpv[k];
< 				if ((!k) || (min0 > truelogl))	{
< 					min0 = truelogl;
< 				}
< 			}
< 			double tot0 = 0;
< 			for (int k=0; k<NRateMode; k++)	{
< 				double truelogl = mRateModeSiteLogSampling[k][i] - logpv[k];
< 				tot0 += exp(min0 - truelogl);
< 			}
< 			tot0 /= NRateMode;
< 
< 			double correctedlogl = min0 - log(tot0);
< 
< 			// these are -log, so the importance samplimng ratio is uncorrected - corrected
< 			deltalogl += sampledlogl - correctedlogl;
< 
< 			// restore branch lengths
< 			for (int j=0; j<mParam->Nnode; j++)	{
< 				BL[j] /= rho;
< 			}
< 
< 		}
< 
< 		meanpv /= mParam->Nsite * NRateMode;
< 
< 	}
< 
< 	else	{
< 
< 		for (int i=0; i<mParam->Nsite; i++)	{
< 
< 			// likelihood such as sampled by mcmc
< 			double sampledlogl = SiteLogSampling(i);
< 
< 			// attempt a correction of branch lengths
< 			for (int j=0; j<mParam->Nnode; j++)	{
< 				BL[j] *= rho;
< 			}
< 
< 			// backup data
< 			int* bkdata = new int[mParam->Ntaxa];
< 			for (int j=0; j<mParam->Ntaxa; j++)	{
< 				bkdata[j] = ZipData[j][i];
< 			}
< 
< 			// set column to first state
< 			for (int j=0; j<mParam->Ntaxa; j++)	{
< 				if (ZipData[j][i] != unknown)	{
< 					ZipData[j][i] = 0;
< 				}
< 			}
< 
< 			// compute probability of each possible constant pattern
< 			for (int l=0; l<Nstate; l++)	{
< 				ZipStationary[i][0] = Stationary[Mode[i]][l];
< 				for (int m=1; m<mParam->ZipSize[i]; m++)	{
< 					ZipStationary[i][m] = (1 - ZipStationary[i][0]) / mParam->OrbitSize[i];
< 				}
< 				
< 				SiteLogSampling(i);
< 				for (int k=0; k<NRateMode; k++)	{
< 					conslogl[k][l] = mRateModeSiteLogSampling[k][i];
< 				}
< 			}
< 			
< 			// restore data
< 			for (int j=0; j<mParam->Ntaxa; j++)	{
< 				ZipData[j][i] = bkdata[j];
< 			}
< 			delete[] bkdata;
< 
< 			UpdateZip(i);
< 
< 			// compute corrected likelihood
< 			SiteLogSampling(i);
< 
< 			// -log prob (not constant)
< 			double logpv[NRateMode];
< 
< 			for (int k=0; k<NRateMode; k++)	{
< 				double min = 0;
< 				for (int l=0; l<Nstate; l++)	{
< 					if ((!l) || (min > conslogl[k][l]))	{
< 						min = conslogl[k][l];
< 					}
< 				}
< 				double tot = 0;
< 				for (int l=0; l<Nstate; l++)	{
< 					tot += exp(min - conslogl[k][l]);
< 				}
< 
< 				// log prob of producing a constant site given the rate
< 				double tmp = min - log(tot);
< 				// prob const
< 				double pc = exp(-tmp);
< 				// prob var
< 				double pv = 1 - pc;
< 				meanpv += pv;
< 				// -log prob var
< 				logpv[k] = -log(pv);
< 			}
< 
< 			double min0 = 0;
< 			for (int k=0; k<NRateMode; k++)	{
< 				double truelogl = mRateModeSiteLogSampling[k][i] - logpv[k];
< 				if ((!k) || (min0 > truelogl))	{
< 					min0 = truelogl;
< 				}
< 			}
< 			double tot0 = 0;
< 			for (int k=0; k<NRateMode; k++)	{
< 				double truelogl = mRateModeSiteLogSampling[k][i] - logpv[k];
< 				tot0 += exp(min0 - truelogl);
< 			}
< 			tot0 /= NRateMode;
< 
< 			double correctedlogl = min0 - log(tot0);
< 
< 			// these are -log, so the importance samplimng ratio is uncorrected - corrected
< 			deltalogl += sampledlogl - correctedlogl;
< 
< 			// restore branch lengths
< 			for (int j=0; j<mParam->Nnode; j++)	{
< 				BL[j] /= rho;
< 			}
< 		}
< 
< 		meanpv /= mParam->Nsite * NRateMode;
< 	}
< 
< 	for (int k=0; k<NRateMode; k++)	{
< 		delete[] conslogl[k];
< 	}
< 	delete[] conslogl;
< 
< 	cerr << deltalogl << '\t' << meanpv << '\n';
< 
< 	return deltalogl;
< 
< }
< 


PickData.cpp


PolyNode.cpp
1524,1527d1523
< 		else if (withleaf && sup)	{
< 			os << "_";
< 			os << ((double) ((int) (precision * sup[label]))) / precision ;
< 		}
1575,1577d1570
< 		else if (sup)	{
< 			os << ((double) ((int) (precision * sup[label]))) / precision ;
< 		}


PostPred.cpp
47,48d46
< 	double cutoff;
< 
118,121d115
< 			else if (s == "-c")	{
< 				i++;
< 				cutoff = atof(argv[i]);
< 			}
287c281
< 			sample->HomoplasyStochastic(nrep, ncat, priormode, priorratemode, priorrootstate,redraw,cutoff);
---
> 			sample->HomoplasyStochastic(nrep, ncat, priormode, priorratemode, priorrootstate,redraw);


Pruning.cpp


Random.cpp


ReadCheck.cpp


ReadCov.cpp


ReadCV.cpp


ReadDiv.cpp
24,25d23
< 	double alpha = 0.05;
< 
44,47d41
< 			else if (s == "-alpha")	{
< 				i++;
< 				alpha = atof(argv[i]);
< 			}
119c113
< 		sample->Dating(ps,verbose,alpha);
---
> 		sample->Dating(ps,verbose);


ReadSample.cpp
55,56d54
< 	int branchfreqs = 0;
< 
59,68d56
< 	int intlnl = 0;
< 
< 	double entropytimemax = 0;
< 	int entropyN = 0;
< 
< 	int constcorrect = 0;
< 	double rho = 1;
< 
< 	int sitelogl = 0;
< 
93,109d80
< 			else if (s == "-lnl")	{
< 				intlnl = 1;
< 			}
< 			else if (s == "-sitelogl")	{
< 				sitelogl = 1;
< 			}
< 			else if (s == "-cst")	{
< 				constcorrect = 1;
< 				i++;
< 				rho = atof(argv[i]);
< 			}
< 			else if (s == "-finitetime")	{
< 				i++;
< 				entropytimemax = atof(argv[i]);
< 				i++;
< 				entropyN = atoi(argv[i]);
< 			}
122,124d92
< 			else if (s == "-branchfreqs")	{
< 				branchfreqs = 1;
< 			}
372,380d339
< 		else if (sitelogl)	{
< 			sample->ReadSiteLogLikelihood();
< 		}
< 		else if (intlnl)	{
< 			sample->ReadSummedLogLikelihood();
< 		}
< 		else if (entropyN)	{
< 			sample->ReadFiniteTimeEntropy(entropytimemax,entropyN);
< 		}
387,389d345
< 		else if (branchfreqs)	{
< 			sample->ReadBranchFreqs();
< 		}
412,414d367
< 		else if (constcorrect)	{
< 			sample->ConstantSiteCorrection(rho);
< 		}


ReadThermo.cpp


ReadTopoCheck.cpp


RemoveTaxa.cpp


RemoveUnknown.cpp


Sample.cpp
207,287d206
< //		 FiniteTimeEntropy
< // ---------------------------------------------------------------------------
< 
< void Sample::ReadFiniteTimeEntropy(double timemax, int N)	{
< 
< 	int size = GetSize();
< 
< 	double* array = new double[N];
< 	for (int n=0; n<N; n++)	{
< 		array[n] = 0;
< 	}
< 
< 	for (int i=0; i<size; i++)	{
< 		cerr << '.';
< 		PhyloBayes* pb = GetNextPB();
< 		pb->Update();
< 		for (int n=0; n<N; n++)	{
< 			double time = (n+1) * timemax / N;
< 			array[n] += pb->GetFiniteTimeEntropy(time);
< 		}
< 	}
< 	cerr << '\n';
< 
< 	ofstream os((SampleName + ".finitetimeentropy").c_str());
< 	for (int n=0; n<N; n++)	{
< 		array[n] /= size;
< 		double time = (n+1) * timemax / N;
< 		os << time << '\t' << array[n] << '\t' << exp(array[n]) << '\n';
< 	}
< 
< 	cerr << '\n';
< 	cerr << "finite-time entropies in " << SampleName << ".finitetimeentropy\n";
< 	cerr << '\n';
< }	
< 
< // ---------------------------------------------------------------------------
< //		 SiteLogLikelihood()
< // ---------------------------------------------------------------------------
< 
< void Sample::ReadSiteLogLikelihood()	{
< 
< 	int size = GetSize();
< 	ofstream os((SampleName + ".sitelogl").c_str());
< 	for (int i=0; i<size; i++)	{
< 		cerr << '.';
< 		PhyloBayes* pb = GetNextPB();
< 		pb->Update();
< 		for (int j=0; j<mParam->Nsite; j++)	{
< 			os << -pb->mSiteLogSampling[j] << '\t';
< 		}
< 		os << '\n';
< 	}
< 	cerr << '\n';
< 	cerr << "site log likelihoods in " << SampleName << ".sitelogl\n";
< 	cerr << '\n';
< }	
< 
< // ---------------------------------------------------------------------------
< //		 RelativeRates
< // ---------------------------------------------------------------------------
< 
< void Sample::ReadSummedLogLikelihood()	{
< 
< 	int size = GetSize();
< 	double meanlogl = 0;
< 	for (int i=0; i<size; i++)	{
< 		cerr << '.';
< 		PhyloBayes* pb = GetNextPB();
< 		pb->Update();
< 		meanlogl += pb->GetSumModeLogSampling();
< 	}
< 	cerr << '\n';
< 	meanlogl /= size;
< 	ofstream os((SampleName + ".lnl").c_str());
< 	os << "mean lnL : " << meanlogl << '\n';
< 	cerr << '\n';
< 	cerr << "mean lnL : " << meanlogl << '\n';
< 	cerr << '\n';
< }	
< 
< // ---------------------------------------------------------------------------
703d621
< 	int* ModeNumber = new int[size];
746d663
< 		ModeNumber[i] = tmp;
976,981d892
< 
< 		ofstream mos((SampleName + ".modenumber").c_str());
< 		for (int i=0; i<size; i++)	{
< 			mos << ModeNumber[i] << '\n';
< 		}
< 		cerr << "mode number distribution in \t" << SampleName << ".modenumber\n";
1736c1647
< void Sample::SampleSub(double*** StatePostProb, int* mask)	{
---
> void Sample::SampleSub(double*** StatePostProb)	{
1737a1649
> 	cerr << "in sample sub\n";
1770,1784d1681
< 	double** instantcompo = new double*[mParam->Nnode];
< 	for (int i=0; i<mParam->Nnode; i++)	{
< 		instantcompo[i] = new double[mParam->Nstate];
< 		for (int k=0; k<mParam->Nstate; k++)	{
< 			instantcompo[i][k] = 0;
< 		}
< 	}
< 
< 	int nfree = 0;
< 	for (int i=0; i<mParam->Nnode; i++)	{
< 		if (allinc ||  mParam->GetCurrentState()->nodefree(i))	{
< 			nfree++;
< 		}
< 	}
< 
1787,1793d1683
< 
< 		for (int j=0; j<mParam->Nnode; j++)	{
< 			for (int k=0; k<mParam->Nstate; k++)	{
< 				instantcompo[j][k] = 0;
< 			}
< 		}
< 
1802c1692
< 		for (int ii=0; ii<mParam->Nnode; ii++)	{
---
> 		for (int i=0; i<mParam->Nnode; i++)	{
1804,1814c1694,1700
< 				if (mask[j])	{
< 					if (mParam->ModeFastCompute)	{
< 						StatePostProb[ii][j][pb->TrueState[ii][j]] ++ ;
< 						compo[ii][pb->TrueState[ii][j]] ++ ;
< 						instantcompo[ii][pb->TrueState[ii][j]] ++ ;
< 					}
< 					else	{
< 						StatePostProb[ii][j][pb->State[ii][j]] ++ ;
< 						compo[ii][pb->State[ii][j]] ++ ;
< 						instantcompo[ii][pb->State[ii][j]] ++ ;
< 					}
---
> 				if (mParam->ModeFastCompute)	{
> 					StatePostProb[i][j][pb->TrueState[i][j]] ++ ;
> 					compo[i][pb->TrueState[i][j]] ++ ;
> 				}
> 				else	{
> 					StatePostProb[i][j][pb->State[i][j]] ++ ;
> 					compo[i][pb->State[i][j]] ++ ;
1816,1840d1701
< 			}
< 		}
< 
< 		for (int j=0; j<mParam->Nnode; j++)	{
< 			double tot = 0;
< 			for (int k=0; k<mParam->Nstate; k++)	{
< 				tot += instantcompo[j][k];
< 			}
< 			for (int k=0; k<mParam->Nstate; k++)	{
< 				instantcompo[j][k] /= tot;
< 			}
< 		}
< 		
< 		ostringstream s;
< 		s << SampleName << "_" << i;
< 		ofstream compos((s.str() + ".comp").c_str());
< 		compos << nfree << '\t' << mParam->Nstate << '\n';
< 
< 		for (int j=0; j<mParam->Nnode; j++)	{
< 			if (allinc ||  mParam->GetCurrentState()->nodefree(j))	{
< 				compos << mParam->GetCurrentState()->GetLeftNodeName(j) << '\t' << mParam->GetCurrentState()->GetRightNodeName(j);
< 				for (int k=0; k<mParam->Nstate; k++)	{
< 					compos << '\t' << instantcompo[j][k];
< 				} 
< 				compos << '\n';
1852,1855d1712
< 		double tot = 0;
< 		for (int k=0; k<mParam->Nstate; k++)	{
< 			tot += compo[i][k];
< 		}
1857c1714
< 			compo[i][k] /= tot;
---
> 			compo[i][k] /= GetSize() * mParam->Nsite;
1859d1715
< 
1872a1729,1734
> 	int nfree = 0;
> 	for (int i=0; i<mParam->Nnode; i++)	{
> 		if (allinc ||  mParam->GetCurrentState()->nodefree(i))	{
> 			nfree++;
> 		}
> 	}
1876,1878d1737
< 	ofstream hos((SampleName + ".entropy").c_str());
< 	hos << nfree << '\t' << mParam->Nstate << '\n';
< 
1883,1884c1742
< 			s << SampleName << '_' << i << '_' << mParam->GetCurrentState()->GetLeftNodeName(i) << '_' << mParam->GetCurrentState()->GetRightNodeName(i);
< 			// s << SampleName << '_' << mParam->GetCurrentState()->GetLeftNodeName(i) << '_' << mParam->GetCurrentState()->GetRightNodeName(i);
---
> 			s << SampleName << '_' << mParam->GetCurrentState()->GetLeftNodeName(i) << '_' << mParam->GetCurrentState()->GetRightNodeName(i);
1892d1749
< 			double meanh = 0;
1896d1752
< 				double h = 0;
1900,1902d1755
< 					if (StatePostProb[i][j][k] > 1e-8)	{
< 						h -= StatePostProb[i][j][k] * log(StatePostProb[i][j][k]);
< 					}
1905d1757
< 				meanh += h;
1908,1910d1759
< 			meanh /= mParam->Nsite;
< 			hos << mParam->GetCurrentState()->GetLeftNodeName(i) << '\t' << mParam->GetCurrentState()->GetRightNodeName(i);
< 			hos << '\t' << meanh << '\t' << exp(meanh) << '\n';
1936,1972d1784
< void Sample::ConstantSiteCorrection(double rho)	{
< 
< 	ofstream os((SampleName + ".cst").c_str());
< 
< 	double* logweight = new double[GetSize()];
< 	double* weight = new double[GetSize()];
< 
< 	double meanpv = 0;
< 
< 	double max = 0;
< 	for (int i=0; i<GetSize(); i++)	{
< 		cerr << '.';
< 		PhyloBayes* pb = GetNextPB();
< 		pb->Update();
< 
< 		double tmp = 0;
< 		double correct = pb->ConstantSiteCorrection(rho, tmp);
< 		meanpv += tmp;
< 		logweight[i] = correct;
< 		if ((!i) || (max < correct))	{
< 			max = correct;
< 		}
< 	}
< 	double sum = 0;
< 	double sum2 = 0;
< 	for (int i=0; i<GetSize(); i++)	{
< 		weight[i] = exp(logweight[i] - max);
< 		sum += weight[i];
< 		sum2 += weight[i] * weight[i];
< 		os << weight[i] << '\n';
< 	}
< 
< 	cerr << "effective sample size : " << sum * sum / sum2  << '\t' << GetSize() << '\n';
< 	meanpv /= GetSize();
< 	cerr << "mean prob of being variable across sites: " << meanpv << '\n';
< }
< 
3156c2968
< void Sample::HomoplasyStochastic(int nrep, int ncat, int priormode, int priorratemode, int priorrootstate, int redraw, double cutoff)	{
---
> void Sample::HomoplasyStochastic(int nrep, int ncat, int priormode, int priorratemode, int priorrootstate, int redraw)	{
3185,3193d2996
< 	double* meansitesat = new double[mParam->Nsite];
< 	double* tmpsitesub = new double[mParam->Nsite];
< 	double* sitediv = new double[mParam->Nsite];
< 
< 	for (int i=0; i<mParam->Nsite; i++)	{
< 		meansitesat[i] = 0;
< 	}
< 
< 	mParam->MeanDiversity(0,sitediv);
3209,3212c3012
< 			double tmpobsnsub = pb->NTrueSubPerSite(tmpsitesub);
< 			for (int j=0; j<mParam->Nsite; j++)	{
< 				meansitesat[j] += tmpsitesub[j] - sitediv[j] + 1;
< 			}
---
> 			double tmpobsnsub = pb->NTrueSubPerSite();
3256,3278d3055
< 	ofstream satos((SampleName + ".sitehomoplasy").c_str());
< 	ofstream maskos((SampleName + ".sitehomoplasymask").c_str());
< 	satos << mParam->Nsite << '\n';
< 	maskos << mParam->Nsite << '\n';
< 	int totnsite = 0;
< 	for (int i=0; i<mParam->Nsite; i++)	{
< 		meansitesat[i] /= size;
< 		satos << meansitesat[i] << '\t';
< 		if ((sitediv[i] > 1) && (meansitesat[i] < cutoff))	{
< 			totnsite++;
< 			maskos << 1 << '\t';
< 		}
< 		else	{
< 			maskos << 0 << '\t';
< 		}
< 	}
< 	satos << '\n';
< 	maskos << '\n';
< 	cerr << "site specific saturation in " << SampleName << ".sitehomoplasy\n";
< 	cerr << "corresponding masks ( > " << cutoff << ") in " << SampleName << ".sitehomoplasymask\n";
< 	cerr << "number of sites included : " << totnsite  << '\n';
< 	cerr << '\n';
< 
4563d4339
< void Sample::ReadBranchFreqs()	{
4565,4569d4340
< 	if (!mParam->NH)	{
< 		cerr << "error in Sample::ReadBranchFreqs: only for branch-heterogeneous models\n";
< 		exit(1);
< 	}
< 	int size = GetSize();
4571,4679c4342
< 	double meanfreq[mParam->Nnode][mParam->Nstate];
< 	for (int j=0; j<mParam->Nnode; j++)	{
< 		for (int k=0; k<mParam->Nstate; k++)	{
< 			meanfreq[j][k] = 0;
< 		}
< 	}
< 	
< 	list<double>** freq = new list<double>*[mParam->Nnode];
< 	for (int j=0; j<mParam->Nnode; j++)	{
< 		freq[j] = new list<double>[mParam->Nstate];
< 	}
< 
< 	double* tmpstat = new double[mParam->Nstate];
< 	for (int i=0; i<size; i++)	{
< 
< 		PhyloBayes* pb = GetNextPB();
< 		pb->UpdateSiteNumber();
< 		pb->UpdateNH();
< 
< 		for (int j=0; j<mParam->Nnode; j++)	{
< 
< 			pb->GetMeanBranchStat(tmpstat,j);
< 
< 			for (int k=0; k<mParam->Nstate; k++)	{
< 				meanfreq[j][k] += tmpstat[k];
< 				freq[j][k].push_front(tmpstat[k]);
< 			}
< 		}
< 	}
< 	delete[] tmpstat;
< 
< 	for (int j=0; j<mParam->Nnode; j++)	{
< 		for (int k=0; k<mParam->Nstate; k++)	{
< 			meanfreq[j][k] /= size;
< 		}
< 	}
< 
< 	PhyloBayes* pb = mParam->GetCurrentState();
< 
< 	ofstream os((SampleName + ".branchfreqs").c_str());
< 	os << "#node\tstatus\ttax1\ttax2";
< 	for (int k=0; k<mParam->Nstate; k++)	{
< 		os << "\tpi_" << k;
< 		os << " mean : median (inf,sup)";
< 	}
< 	os << '\n';
< 
< 	for (int j=0; j<mParam->Nnode; j++)	{
< 		os << j << '\t';
< 		if (pb->tree[j].isLeaf())	{
< 			os << "Leaf"; // mParam->SpeciesNames[j];
< 		}
< 		else if (pb->tree[j].isRoot())	{
< 			os << "Root";
< 		}
< 		else	{
< 			os << "Intr";
< 		}
< 
< 		os << '\t' << mParam->GetCurrentState()->GetLeftNodeName(j) << '\t' << mParam->GetCurrentState()->GetRightNodeName(j);
< 
< 		/*
< 		for (int k=0; k<mParam->Nstate; k++)	{
< 			os << '\t' << meanfreq[j][k];
< 		}
< 		*/
< 
< 		double median[mParam->Nstate];
< 		double inf95[mParam->Nstate];
< 		double sup95[mParam->Nstate];
< 
< 		double alpha = 0.05;
< 
< 		int take = (int) (alpha * size / 2);
< 		int mediansize = size / 2;
< 
< 		for (int k=0; k<mParam->Nstate; k++)	{
< 			freq[j][k].sort();
< 			list<double>::const_iterator i = freq[j][k].begin();
< 			for (int l=0; l<take; l++)	{
< 				i++;
< 			}
< 			inf95[k] = *i;
< 			for (int l=take; l<mediansize; l++)	{
< 				i++;
< 			}
< 			median[k] = *i;
< 			for (int l=mediansize; l<size - take; l++)	{
< 				i++;
< 			}
< 			sup95[k] = *i;
< 			os << '\t' << meanfreq[j][k] << " : " << median[k] << " (" << inf95[k] << "," << sup95[k] << ")";
< 		}
< 		os << '\n';
< 	}
< 
< 	Tree* tree = new Tree(pb);
< 	tree->Dichotomise();
< 	tree->ChangeNames(mParam->SpeciesNames, mParam->SpeciesNames, mParam->Ntaxa);
< 	tree->mRoot->SortLeavesAlphabetical();
< 
< 	ofstream label_os((SampleName + ".labels").c_str());
< 	tree->Phylip(label_os, 1, 0, 1, 1);
< 	label_os.close();
< }	
< 
< 
< 
< void Sample::Dating(int ps, int verbose, double alpha)	{
---
> void Sample::Dating(int ps, int verbose)	{
4897,4898c4560
< 	int take = (int) (alpha * size / 2);
< 	// int take = size / 40;
---
> 	int take = size / 40;
4935c4597
< 	os << "#node\t(meandate\tstderr\tinf" << ((int) (100 * (1-alpha))) << "\tsup" << ((int) (100 * (1-alpha))) << "\tinstant rate\tstderr\taverage rate\tstderr\n";
---
> 	os << "#node\t(meandate\tstderr\tinf95\tsup95)\tinstant rate\tstderr\taverage rate\tstderr\n";
4959d4620
< 	// pb->root->renormLengths(0.001);
4971,4978d4631
< 	cons_os.close();
< 
< 	for (int j=0; j<mParam->Nnode; j++)	{
< 		meanrate[j] *= 1000;
< 	}
< 	ofstream rate_os((SampleName + ".ratetree").c_str());
< 	tree->ChronoPhylip(rate_os, 1, 1, 0, meanrate,1);
< 	rate_os.close();


SampleSub.cpp
31,32d30
< 	string mask = "None";
< 
111,114d108
< 			else if (s == "-mask")	{
< 				i++;
< 				mask = argv[i];
< 			}
205,216c199,200
< 		if (mask != "None")	{
< 			ifstream is(mask.c_str());
< 			int nsite;
< 			is >> nsite;
< 			if (nsite != mParam->Nsite)	{
< 				cerr << "error when reading mask: non matching number of sites : " << nsite << '\n';
< 				exit(1);
< 			}
< 
< 			for (int i=0; i<nsite; i++)	{
< 				is >> sitemask[i];
< 			}
---
> 		for (int i=0; i<mParam->Nsite; i++)	{
> 			sitemask[i] = 0;
218,230c202,210
< 		else	{
< 			for (int i=0; i<mParam->Nsite; i++)	{
< 				sitemask[i] = 0;
< 			}
< 			if (imin == -1)	{
< 				imin = 0;
< 			}
< 			if (imax == -1)	{
< 				imax = mParam->Nsite;
< 			}
< 			for (int i=imin; i<imax; i++)	{
< 				sitemask[i] = 1;
< 			}
---
> 		if (imin == -1)	{
> 			imin = 0;
> 		}
> 		if (imax == -1)	{
> 			imax = mParam->Nsite;
> 		}
> 
> 		for (int i=imin; i<imax; i++)	{
> 			sitemask[i] = 1;
276c256
< 			sample->SampleSub(0,sitemask);
---
> 			sample->SampleSub();
290a271
> 


StopAfter.cpp


StopChain.cpp


SubData.cpp


SubJackBoot.cpp


SubMatrix.cpp


SubSample.cpp


SumCV.cpp


SumThermo.cpp


TaxaParameters.cpp


TaxaRandomSubSample.cpp


TaxaSubSample.cpp


Test.cpp


TraceComp.cpp


Tree.cpp
962,965d961
< 								cerr << c << '\n';
< 								double d;
< 								is >> d;
< 								cerr << d << '\n';


TreeList.cpp


TreeToPS.cpp


AmphiNode.h
144,153d143
< 	void renormLengths(double scalingfactor)	{
< 		if (! isRoot())	{
< 			branchLength *= scalingfactor;
< 		}
< 		if (! isLeaf())	{
< 			((AmphiNode*) left)->renormLengths(scalingfactor);
< 			((AmphiNode*) right)->renormLengths(scalingfactor);
< 		}
< 	};
< 		


Bipartition.h


BipartitionList.h


Chain.h


Chrono.h


Consensus.h


Constants.h


correlation.h


jph.h


linalg.h


MCParameters.h
44c44
< 	double			MeanDiversity(int* histo = 0, double* tmp = 0);
---
> 	double			MeanDiversity(int* histo = 0);
150d149
< 	Prior			GammaPrior;
157,159d155
< 
< 	double 			RRAlphaMin;
< 	double 			RRAlphaMax;


myenv.h


mystream.h


mystring.h


Node.h


PhyloBayes.h
148,150d147
< 
< 		double				GetFiniteTimeEntropy(double time);
< 		double				GetFiniteTimeEntropy(double time, int mode);
164,165d160
< 		void				GetMeanBranchStat(double* avstat, int j);
< 
638c633
< 		double				NTrueSubPerSite(double* tmp = 0);
---
> 		double				NTrueSubPerSite();
682,683d676
< 		double				ConstantSiteCorrection(double rho, double& meanpv);
< 
866d858
< 		double				logGammaPrior();
1654,1656d1645
< 
< 		double				GetSumModeLogSampling();
< 		double				GetSumModeSiteLogSampling(int site, double* weight);


phylo.h
80,81c80,81
< 	const int DNAN = 37;
< 	const int RNAN = 37;
---
> 	const int DNAN = 38;
> 	const int RNAN = 38;
127c127
< 	const int Dayhoff4Table[] = {3,-1,2,2,0,3,1,0,1,0,0,2,3,2,1,3,3,0,0,0};
---
> 	const int Dayhoff4Table[] = {3,-1,2,2,0,3,1,0,1,0,0,2,3,2,1,3,3,0,2,2};
590,848d589
< const double CG6StatFix[6][20] = {{0.0868109,0.00800647,0.0603889,0.0746749,0.0288533,0.0449645,0.0194255,0.0573022,0.0593364,0.0689465,0.0191267,0.0334719,0.15729,0.0352166,0.0442872,0.0554703,0.0483941,0.0688085,0.00784919,0.0213756},
< {0.035671,0.00705817,0.119144,0.0415939,0.0919541,0.111489,0.0117221,0.0133989,0.033734,0.0264084,0.0084815,0.0431066,0.0438924,0.0219144,0.0370221,0.108675,0.12947,0.0186288,0.0155589,0.081077},
< {0.222272,0.0458389,0.0070763,0.00673509,0.0502587,0.119971,0.0106867,0.0387956,0.00726543,0.0887825,0.0221199,0.0123076,0.0192136,0.00778413,0.0100978,0.0359658,0.0690567,0.128338,0.0429625,0.0544713},
< {0.149797,0.0266512,0.0102004,0.00672546,0.144465,0.113466,0.00843539,0.0469401,0.0068417,0.186584,0.0297543,0.0149152,0.0138865,0.00794368,0.00967841,0.136586,0.0254226,0.0331411,0.0197253,0.00884092},
< {0.0323714,0.00739108,0.0851093,0.0413837,0.0168777,0.198619,0.0313881,0.101708,0.0658413,0.042948,0.0101795,0.0832934,0.0150223,0.0374595,0.0506401,0.0385885,0.0218451,0.0983149,0.00639853,0.0146208},
< {0.0863355,0.011268,0.0548328,0.0784968,0.0383706,0.0471228,0.0260948,0.0590604,0.0661469,0.108287,0.023513,0.040988,0.0172652,0.0472062,0.0610844,0.0580417,0.0555067,0.0680348,0.0140855,0.0382588}};
< 
< const double CG6RR[190] = {1.79343,0.518028,1.24485,0.163123,1.91633,0.373638,0.130026,0.619796,0.285445,0.869732,0.333299,1.3423,1.06875,0.483594,4.759,2.12005,2.10207,0.0973215,0.156754,0.0801425,0.00415815,0.821029,0.482439,
< 0.770846,0.328916,0.0178637,0.546877,0.852964,0.676909,0.108203,0.115518,0.869468,3.10049,1.22138,1.73357,0.401602,1.02872,5.15786,0.0165837,0.857585,0.854771,0.0116738,0.257285,0.0153956,0.0287817,4.69939,0.388532,0.501966,
< 0.110999,1.20927,0.407981,0.0429497,0.0307864,0.114746,0.0164572,0.44012,0.368033,0.0434091,1.63234,0.0650548,0.163329,0.520356,0.453844,3.81647,0.315032,0.628084,0.614904,0.273699,0.0591765,0.090583,0.0543423,0.810122,1.07332,0.025083,2.18883,1.64161,0.0929775,0.0839157,0.0382749,0.0548988,0.269274,0.125388,0.593598,1.95222,8.12528,0.297476,0.00674531,0.322124,0.0354196,0.119438,1.26949,0.229701,0.308118,0.444644,1.7133,0.13577,
< 0.0612591,0.144322,0.0410265,0.112748,0.64945,0.394001,0.434056,4.34966,0.562568,4.3934,2.36195,0.991417,0.564987,0.126517,0.568354,5.337,0.160575,4.23836,4.73709,0.175825,0.0749186,0.0767769,0.126611,0.0690827,1.13532,10.9867,0.0851102,0.222506,0.147223,0.713218,2.13172,0.424831,3.21719,6.0063,0.800118,1.24324,0.194481,0.0411381,0.106429,6.46964,0.0757873,0.297741,0.621421,0.331532,0.164241,0.289096,1.76981,0.456506,0.288684,
< 0.398366,0.108237,1.6309,0.493036,0.328527,1.96986,2.01585,0.549499,0.43044,0.179979,1.62478,0.702198,4.35994,2.11874,0.0876909,0.0411825,0.560709,0.76018,0.399576,1.45184,0.612891,0.291633,0.0832659,0.0852953,2.67068,1.24408,1.08044,0.228432,0.188726,0.204612,0.914301,0.616416,0.178864,0.489291,0.250071,6.43242,0.106226,0.194668,0.319288,2.17205,0.0984022,0.167699,0.126945,0.213005,2.36832};
< 
< const double CG10RR[190] = {1.9989,0.496019,1.17406,0.200338,1.91595,0.389579,0.12205,0.595661,0.296248,0.912672,0.334839,1.38922,1.02478,0.471406,4.90288,2.25694,2.14441,0.115176,0.175123,0.0825082,0.00447673,0.952749,0.57962,0.62749,0.313543,0.0175657,0.516418,0.867975,0.641193,0.107063,0.116861,0.799796,3.26168,1.20469,1.57855,0.408419,0.955083,5.14903,0.0141958,0.886258,0.938485,0.0125341,0.264063,0.0150163,0.0266874,4.62005,0.391436,0.505101,0.116131,1.18308,0.433875,0.046222,0.0263185,0.124004,0.016392,0.43124,0.400306,0.0439626,1.61906,0.0721008,0.169109,0.532874,0.453929,3.77756,0.322427,0.617182,0.588234,0.266397,0.0629914,0.0961023,0.0458256,0.764678,1.06424,0.0238098,2.30736,1.64623,0.0733036,0.0930913,0.0371202,0.0538623,0.320516,0.136321,0.588568,1.9018,8.33397,0.330324,0.00755733,0.311052,0.0341079,0.118299,1.33386,0.228641,0.301955,0.447802,1.73284,0.153184,0.0857462,0.15169,0.0344445,0.120617,0.668318,0.365433,0.42956,4.52837,0.552732,4.59103,2.31266,0.985477,0.559329,0.122882,0.535858,4.69918,0.170744,4.05791,4.60592,0.201997,0.0638576,0.0798613,0.132034,0.0660288,1.09589,11.3024,0.0887821,0.219521,0.155815,0.733186,2.19898,0.419989,3.22546,6.05979,0.786273,1.22185,0.195856,0.0429686,0.102586,6.38912,0.0714957,0.312052,0.662812,0.335003,0.177929,0.309189,1.75107,0.494166,0.285974,0.366838,0.117709,1.6606,0.499453,0.338447,2.0247,1.99785,0.585877,0.439654,0.178547,1.65969,0.723502,4.25191,2.14972,0.0966373,0.036169,0.520729,0.755348,0.39234,1.47444,0.651889,0.25795,0.0814525,0.0905222,2.71118,1.21046,1.06516,0.229105,0.197651,0.204639,0.902502,0.617187,0.176016,0.500374,0.241584,6.43768,0.10171,0.159432,0.336762,1.93539,0.0762845,0.187546,0.127285,0.202075,2.36563};
< 
< const double CG10StatWeight[10] = {0.0264211,0.0392776,0.0415487,0.0664512,0.136813,0.112557,0.425776,0.0919425,0.0179704,0.0412423};
< 
< const double CG10StatFix[10][20] = {{0.0252068,0.0134833,0.15989,0.0189597,0.141849,0.0596335,0.0143987,0.0306495,0.0131915,0.208147,0.0411813,0.120686,0.0162565,0.0120666,0.014527,0.0346946,0.0199551,0.0336818,0.0129628,0.00857893},
< {0.221193,0.0539464,0.0092461,0.008234,0.0501839,0.0507115,0.0129623,0.0326564,0.00821583,0.0810625,0.0223878,0.0147024,0.019687,0.00902954,0.0115915,0.0464507,0.0787133,0.164212,0.0487944,0.0560197},
< {0.034161,0.00467607,0.0772063,0.0539357,0.08183,0.273411,0.020784,0.00712793,0.0862078,0.0165463,0.00727011,0.0705455,0.0203614,0.0420011,0.0512334,0.0383782,0.0251636,0.0115729,0.00738033,0.0702071},
< {0.0656782,0.0310531,0.0202728,0.0285165,0.0285403,0.0340252,0.056325,0.0483359,0.0560228,0.186126,0.0212019,0.0391148,0.0233829,0.0328879,0.0756314,0.0445992,0.043252,0.0889073,0.0157781,0.0603489},
< {0.0819335,0.0076874,0.0620977,0.075689,0.0243894,0.0456926,0.0189198,0.0702897,0.0596915,0.0578337,0.0155331,0.0334051,0.158368,0.0349808,0.0445188,0.0555695,0.0459228,0.0803412,0.00716953,0.0199669},
< {0.160763,0.0068497,0.0582418,0.0896175,0.0273144,0.0394939,0.0196731,0.0495248,0.0710836,0.112725,0.0233476,0.0361018,0.0161564,0.0500832,0.060763,0.0524305,0.0427148,0.0526455,0.00752987,0.0229408},
< {0.0727598,0.0110847,0.0609105,0.0710826,0.0421185,0.0601195,0.0248432,0.0652072,0.062239,0.0964712,0.0244816,0.0444254,0.0191939,0.0466248,0.0583233,0.0680507,0.0517497,0.0671871,0.0147925,0.0383345},
< {0.0612726,0.0107711,0.0400844,0.107046,0.0407877,0.0277614,0.0243198,0.054593,0.0725232,0.0754894,0.0197225,0.0342619,0.0161999,0.047839,0.0596739,0.0476598,0.105136,0.100883,0.0131691,0.0408059},
< {0.0280749,0.00687487,0.106104,0.0316359,0.0845976,0.0778142,0.0122481,0.0100383,0.0187139,0.0354596,0.00682296,0.0390195,0.0271078,0.0141056,0.0207825,0.140239,0.14748,0.0128632,0.147302,0.0327164},
< {0.186614,0.0179691,0.00614378,0.00546742,0.0418463,0.256747,0.0048841,0.122381,0.00494276,0.163117,0.0196015,0.00882744,0.01352,0.00481516,0.00749694,0.0551498,0.019985,0.0360509,0.00917287,0.0152676}};
< 
< const double CG20RR[190] = {2.11409,0.500383,1.18828,0.16678,1.85623,0.370743,0.135651,0.601061,0.322578,0.938501,0.33749,1.3194,1.03445,0.471817,4.76924,2.26897,2.29836,0.123716,0.156915,0.0886014,0.0046542,0.886928,0.573939,0.659728,0.309439,0.0183007,0.546543,0.822671,0.651081,0.110225,0.11791,0.795566,3.08014,1.17946,1.69381,0.500569,1.01941,4.9752,0.0175796,0.904163,0.893106,0.011379,0.261827,0.0152947,0.0290069,4.65128,0.414261,0.503305,0.115212,1.24738,0.431835,0.0433887,0.0226006,0.123777,0.016545,0.43303,0.393747,0.0457583,1.59707,0.0713349,0.175671,0.525996,0.475326,3.70677,0.314266,0.628983,0.610858,0.283448,0.0624085,0.0923724,0.0457069,0.785836,1.04241,0.0255649,2.37741,1.75607,0.09122,0.0718723,0.0390928,0.0566299,0.283106,0.126955,0.59037,1.99507,8.57132,0.330512,0.00775584,0.331765,0.0307378,0.104977,1.36816,0.231568,0.30972,0.469768,1.80457,0.15155,0.0812712,0.166381,0.0380258,0.118539,0.690875,0.408378,0.420641,4.40687,0.578731,4.59631,2.43259,1.00088,0.559239,0.12129,0.511614,4.78174,0.178375,4.16054,4.71471,0.180345,0.0776842,0.0833785,0.137604,0.0689084,1.13229,10.7587,0.0693096,0.218724,0.153268,0.752626,2.17377,0.441954,3.15268,5.96654,0.804642,1.23906,0.202045,0.0437994,0.106916,6.59721,0.0772099,0.298307,0.660022,0.331023,0.172065,0.289563,1.74889,0.5428,0.306255,0.355736,0.113207,1.66886,0.505804,0.32401,1.99745,2.10504,0.632467,0.445907,0.185104,1.64517,0.726959,4.34959,2.13247,0.0917754,0.0316863,0.538816,0.781537,0.410353,1.48924,0.653165,0.296438,0.0745747,0.0681223,2.6391,1.23509,1.06965,0.236981,0.198519,0.20872,0.925152,0.61527,0.178253,0.493473,0.248647,6.40502,0.107439,0.184824,0.35306,2.05214,0.0904017,0.189369,0.112636,0.193995,2.31209};
< 
< const double CG20StatWeight[20] = {0.0151671,0.02541,0.0319625,0.105569,0.0215911,0.0118144,0.02245,0.0195248,0.021391,0.0345195,0.0101073,0.00979145,0.0262499,0.0122659,0.0332378,0.0226548,0.394049,0.0660986,0.0989422,0.0172038};
< 
< const double CG20StatFix[20][20] = 
< {{0.210154,0.0186798,0.0073746,0.0055795,0.16095,0.0411903,0.00671303,0.127051,0.00494912,0.0891817,0.0197337,0.00880306,0.0072309,0.00532825,0.00720679,0.180542,0.0212324,0.0380361,0.0291636,0.0109005},
< {0.112359,0.00455834,0.071773,0.117865,0.0662674,0.0477489,0.0142761,0.0186595,0.0696884,0.0257877,0.00895266,0.0281211,0.155296,0.0344675,0.0390126,0.0538755,0.038975,0.0265985,0.00776656,0.0579512},
< {0.0581015,0.0154461,0.0156867,0.0249113,0.027386,0.0259554,0.0325833,0.0457675,0.0830162,0.231217,0.0178669,0.0277077,0.0158723,0.0332826,0.0929473,0.0318204,0.0382748,0.108346,0.0142525,0.0595583},
< {0.0735003,0.00789947,0.0614761,0.0662592,0.0262771,0.0461376,0.0210374,0.0598062,0.0601797,0.0827893,0.0197491,0.0371155,0.138023,0.0382543,0.0503864,0.0596482,0.0505067,0.0731838,0.00680925,0.0209613},
< {0.0341513,0.00545945,0.0587161,0.0576528,0.0759392,0.26299,0.02942,0.00834032,0.100917,0.0198976,0.00801009,0.083439,0.0175293,0.0490507,0.0564395,0.0345119,0.0229267,0.0126869,0.0076066,0.054315},
< {0.0324293,0.00527821,0.139677,0.0382104,0.082371,0.0613269,0.0129788,0.0111244,0.0329456,0.0326612,0.00792921,0.0518243,0.0324477,0.0206753,0.0311703,0.0991893,0.148284,0.0144588,0.112119,0.0328986},
< {0.0192211,0.00780208,0.177222,0.0190742,0.0231859,0.036156,0.0173114,0.115696,0.0243846,0.0243232,0.00585138,0.1219,0.0141108,0.016756,0.0357972,0.0362234,0.015455,0.123782,0.113212,0.0525358},
< {0.224086,0.0303641,0.00947403,0.00930492,0.0289649,0.0283121,0.0396625,0.0282952,0.00898895,0.0579206,0.018332,0.0135574,0.00971764,0.00920601,0.0122303,0.0369203,0.0987605,0.206771,0.0316076,0.0975238},
< {0.0899045,0.0174772,0.070371,0.0483721,0.0464997,0.0477694,0.116246,0.0684223,0.0360744,0.0750153,0.0201409,0.0349372,0.0180265,0.033979,0.0408902,0.0553535,0.0391512,0.0785439,0.020352,0.0424738},
< {0.0240598,0.00502623,0.127367,0.0524954,0.0181562,0.242247,0.012108,0.111236,0.0166597,0.172263,0.0147831,0.0508176,0.0120407,0.0149786,0.0136986,0.030017,0.0141647,0.0557728,0.00266953,0.00943883},
< {0.32485,0.00646891,0.00402635,0.00458941,0.0855932,0.375822,0.00270232,0.00756536,0.00410242,0.0114352,0.00370713,0.00452029,0.0057548,0.00298052,0.00534536,0.0262245,0.0109656,0.0115053,0.00851163,0.0933291},
< {0.0702705,0.02854,0.0136209,0.0192119,0.0314353,0.0416602,0.051366,0.125009,0.0186227,0.0530298,0.0927465,0.181029,0.0186571,0.0248167,0.0259154,0.0675001,0.0357654,0.04452,0.0092607,0.0470229},
< {0.110562,0.00645162,0.0656134,0.0776383,0.0215532,0.0386858,0.0186354,0.0692096,0.159271,0.0787419,0.0182859,0.0445761,0.016386,0.0473309,0.0346115,0.0563277,0.049741,0.0638178,0.00503061,0.0175299},
< {0.0251301,0.00885211,0.008606,0.00593483,0.186348,0.069964,0.00581214,0.0180551,0.00618778,0.256966,0.0153252,0.0138183,0.0141526,0.00547276,0.0075588,0.164599,0.150958,0.0176633,0.0117892,0.00680665},
< {0.154817,0.0294364,0.00807143,0.00778561,0.106906,0.216249,0.00742415,0.055067,0.00778879,0.126014,0.0295639,0.0138397,0.0112239,0.00885468,0.0112283,0.0522995,0.0495454,0.0771866,0.014838,0.011861},
< {0.13953,0.0150301,0.00862795,0.0108223,0.0557605,0.0592855,0.00953924,0.061827,0.00965789,0.0669752,0.0165746,0.015208,0.269268,0.0102332,0.0121085,0.0406112,0.0384841,0.0859996,0.0223782,0.0520787},
< {0.0690328,0.0109658,0.0545564,0.0865858,0.0400639,0.0437663,0.0246886,0.0628316,0.0648266,0.0905369,0.0212443,0.0414698,0.0174392,0.0487973,0.0623772,0.0594016,0.0657791,0.0798259,0.0149051,0.0409058},
< {0.0723173,0.0084998,0.0586445,0.0528097,0.0359048,0.117435,0.0217619,0.0326558,0.0555816,0.140265,0.0451266,0.0471733,0.0176232,0.0460495,0.0542578,0.0786215,0.0405648,0.03291,0.0102029,0.0315952},
< {0.159204,0.00698603,0.0621695,0.0878829,0.0280776,0.0442158,0.0202868,0.0526302,0.0629738,0.106621,0.0206209,0.0373618,0.0151963,0.0515852,0.0687167,0.0529257,0.0417233,0.0478719,0.00854669,0.0244031},
< {0.0960794,0.1477,0.0165381,0.018663,0.0341546,0.0433707,0.0206899,0.0508377,0.035846,0.120712,0.0237936,0.0269431,0.0158141,0.026639,0.0559393,0.063585,0.0646062,0.0816382,0.0161519,0.0402985}};
< 
< const double CG30RR[190] = {2.02429,0.502699,1.18179,0.161901,1.87411,0.380328,0.139251,0.602231,0.329061,0.967546,0.339764,1.31259,1.04245,0.475411,4.79629,2.29305,2.29871,0.108337,0.153529,0.0895159,0.00474004,0.881958,0.585766,0.692944,0.314734,0.0181294,0.535886,0.811123,0.654756,0.110695,0.118298,0.801935,3.08135,1.22153,1.68674,0.448043,1.02688,4.9532,0.0178085,0.892249,0.896237,0.0116359,0.257757,0.0145007,0.0289616,4.65077,0.404454,0.49421,0.115588,1.23961,0.443964,0.0440033,0.0274052,0.130264,0.0167688,0.429775,0.396366,0.0445985,1.58523,0.0719802,0.178511,0.539138,0.468375,3.72752,0.317567,0.633631,0.618076,0.278951,0.0628244,0.0950746,0.0482704,0.803231,1.05297,0.0259739,2.35791,1.72167,0.0943343,0.0822182,0.0390299,0.0547259,0.277504,0.127103,0.59283,1.82881,7.94771,0.322459,0.00710413,0.326257,0.0354083,0.112543,1.3809,0.223634,0.309189,0.455351,1.7612,0.155441,0.0715037,0.169221,0.038345,0.112653,0.694631,0.416868,0.410448,4.32784,0.570193,4.53105,2.37513,0.991476,0.567517,0.126756,0.512118,4.64617,0.17331,4.06603,4.59082,0.18363,0.0814084,0.0809652,0.136452,0.0704865,1.12741,10.905,0.08509,0.22466,0.160745,0.773769,2.1749,0.42319,3.15421,6.00555,0.804877,1.23078,0.202154,0.0440114,0.108119,6.25843,0.0725231,0.304336,0.673489,0.346679,0.174624,0.297744,1.7546,0.51416,0.303853,0.392311,0.114355,1.68575,0.520828,0.32851,2.02536,2.06449,0.592622,0.447778,0.184504,1.64366,0.722644,4.36545,2.1658,0.0870911,0.0381145,0.56796,0.769104,0.403714,1.45794,0.64509,0.309873,0.0737725,0.0770744,2.65358,1.24231,1.0847,0.234686,0.199245,0.210494,0.925026,0.619234,0.182556,0.484173,0.242842,6.57444,0.10918,0.168973,0.336657,2.07975,0.0793159,0.187483,0.133619,0.214308,2.15871};
< 
< const double CG30StatWeight[30] = {0.0153426,0.202839,0.017766,0.0103904,0.0404552,0.0121959,0.0226171,0.0160274,0.0152089,0.00775648,0.0184207,0.0138605,0.0145574,0.0126643,0.232317,0.00403728,0.00856772,0.0130411,0.0104783,0.011828,0.0295193,0.0137968,0.0106506,0.0143698,0.0162982,0.0256894,0.0314999,0.0180015,0.0898437,0.0499597};
< 
< const double CG30StatFix[30][20] = 
< {{0.0238436,0.00939411,0.196689,0.0143555,0.0186079,0.0289224,0.0106599,0.0569409,0.0102681,0.242949,0.0147166,0.131628,0.0127284,0.00893618,0.013194,0.0291075,0.013605,0.143212,0.00995295,0.0102882},
< {0.0701207,0.0107927,0.0519031,0.094246,0.0461966,0.0410956,0.0264791,0.0648495,0.0650885,0.0792002,0.0214832,0.0396416,0.01815,0.0455434,0.0617445,0.0621501,0.0596016,0.0777077,0.0172749,0.0467311},
< {0.148992,0.00561603,0.0618495,0.0872568,0.0194244,0.0368592,0.0170019,0.0671006,0.158025,0.0657809,0.0166397,0.0426687,0.0160003,0.0474486,0.0345084,0.054,0.0452827,0.0560791,0.00475151,0.0147156},
< {0.0281006,0.00482267,0.149194,0.0341192,0.0863042,0.0577299,0.0136027,0.00894166,0.0258334,0.0276022,0.00630277,0.0552436,0.0310347,0.0187527,0.0276906,0.108898,0.124886,0.0114992,0.143021,0.0364205},
< {0.0246404,0.0045903,0.0775182,0.0444655,0.00848799,0.234244,0.0298431,0.107436,0.0784911,0.0289648,0.00682426,0.0810706,0.0104729,0.0405597,0.0529869,0.0305062,0.0165244,0.10971,0.00381884,0.00884415},
< {0.169261,0.0297287,0.00717978,0.00668,0.0320076,0.0388276,0.0108716,0.0340005,0.00631861,0.0655918,0.0197232,0.0109414,0.0101538,0.00748268,0.00798345,0.0446547,0.185942,0.120053,0.104101,0.0884967},
< {0.132703,0.0149806,0.00872565,0.0104803,0.0585485,0.0588917,0.0104455,0.0614118,0.00952578,0.071236,0.0175125,0.0155969,0.269885,0.0105634,0.0119618,0.0422008,0.0389236,0.0814026,0.022183,0.0528223},
< {0.0677832,0.0218362,0.0173241,0.027628,0.0389886,0.0362829,0.0459095,0.0624803,0.0393804,0.119478,0.027113,0.168218,0.0154806,0.0332576,0.0513253,0.050074,0.0462045,0.0688135,0.0130783,0.0493446},
< {0.058675,0.0179327,0.0171988,0.0271706,0.0366981,0.0405139,0.0490998,0.0521738,0.0370582,0.125678,0.0198237,0.0268838,0.0218583,0.034542,0.157975,0.0453035,0.0673757,0.0905065,0.0248353,0.0486975},
< {0.292653,0.0834196,0.0060149,0.00480738,0.026905,0.0557761,0.00502979,0.0483719,0.00576582,0.217651,0.0215878,0.0113076,0.00516664,0.00600029,0.00936005,0.0301394,0.0472809,0.0935586,0.00995492,0.0192491},
< {0.0408596,0.00851546,0.0504025,0.0806719,0.0335383,0.0235132,0.0241235,0.0764785,0.0825354,0.0748974,0.0197942,0.0365758,0.0161907,0.0438009,0.0550077,0.0368806,0.181709,0.0706058,0.01331,0.0305892},
< {0.0732812,0.0107759,0.0279298,0.131199,0.0228006,0.0235618,0.0194997,0.0375839,0.0836882,0.0613804,0.0189887,0.0268952,0.0188976,0.0556169,0.0522237,0.0423965,0.0876545,0.181712,0.00436143,0.0195533},
< {0.0762959,0.145161,0.0183265,0.0222801,0.0385468,0.0432718,0.0241947,0.0527691,0.0486352,0.0888738,0.0263979,0.0275817,0.0173522,0.0324683,0.0595505,0.0729397,0.0534613,0.0899506,0.0209866,0.0409564},
< {0.0511759,0.0168505,0.0142517,0.0232758,0.0396879,0.0295667,0.0250702,0.033687,0.118201,0.255487,0.0266875,0.0203688,0.0143691,0.0333384,0.0890804,0.0300975,0.0295948,0.0427006,0.0164999,0.090009},
< {0.0755412,0.0100671,0.0673535,0.0670227,0.0346282,0.0543306,0.0239222,0.0608131,0.0653211,0.119673,0.0245306,0.0451793,0.0183254,0.0511685,0.0572793,0.0619029,0.0512327,0.0655453,0.0123266,0.0338362},
< {0.0332289,0.0130111,0.130341,0.0296747,0.0158405,0.0376155,0.15029,0.166796,0.013583,0.0453253,0.126259,0.025958,0.0129995,0.0848526,0.0135556,0.0257042,0.0239954,0.0346628,0.00511641,0.0111902},
< {0.278608,0.0316317,0.00775373,0.00704498,0.0627178,0.0362344,0.00747483,0.0249922,0.00794611,0.0459245,0.0188519,0.0111616,0.0123412,0.00674481,0.0105436,0.0277417,0.043644,0.281322,0.0197574,0.0575626},
< {0.148562,0.0047189,0.0640532,0.125225,0.0209986,0.0385655,0.0152805,0.0357331,0.0684518,0.0450287,0.0116211,0.0281767,0.161422,0.0363573,0.0405683,0.0501007,0.0397104,0.042692,0.00572277,0.0170116},
< {0.0227041,0.00789188,0.00830538,0.0053434,0.198157,0.0544427,0.00453139,0.0172929,0.00566532,0.268077,0.0150259,0.012899,0.01225,0.00488885,0.00660328,0.163018,0.155444,0.016488,0.0138775,0.00709428},
< {0.0469248,0.0144938,0.0346646,0.0152263,0.0328242,0.212405,0.0143961,0.0230347,0.0109979,0.197639,0.0875311,0.0397069,0.019283,0.0129148,0.013184,0.15578,0.0219971,0.0205289,0.00983633,0.0166321},
< {0.133406,0.0254556,0.0090988,0.00840602,0.11611,0.230179,0.00829594,0.0567851,0.00821503,0.122774,0.0344875,0.0145304,0.0128844,0.0100794,0.0119112,0.0542445,0.0460827,0.0703982,0.014022,0.012634},
< {0.217362,0.0188233,0.00623719,0.00510468,0.160862,0.0349352,0.00543453,0.122538,0.00456405,0.08238,0.019967,0.00779851,0.006855,0.00494594,0.00659142,0.17775,0.0210708,0.038302,0.0464078,0.0120705},
< {0.313745,0.00608969,0.00413218,0.00461299,0.0928298,0.37839,0.00296195,0.00586899,0.00390147,0.00969964,0.00304969,0.00451278,0.00592923,0.00283758,0.0049236,0.0262657,0.0105522,0.0102247,0.0086472,0.100825},
< {0.0614721,0.00521216,0.0921074,0.0779496,0.0105491,0.0758189,0.0180772,0.013645,0.0992198,0.0206772,0.00738481,0.0381335,0.252351,0.0366857,0.0444312,0.0639273,0.0459807,0.0188897,0.00713836,0.010349},
< {0.136884,0.0174437,0.0437955,0.0367344,0.0365502,0.0494152,0.103991,0.0675198,0.025972,0.0773116,0.0208846,0.0285242,0.0138143,0.0233754,0.0264957,0.0638426,0.0399232,0.0801864,0.0264636,0.0808732},
< {0.193976,0.00551518,0.0809404,0.0894555,0.05611,0.0540582,0.0218126,0.0275429,0.0636513,0.0439413,0.0126334,0.0389409,0.0162152,0.0512322,0.075838,0.0531698,0.0384462,0.0259653,0.0141827,0.0363729},
< {0.0739945,0.00635535,0.0607442,0.071211,0.0797361,0.18157,0.0194834,0.0140884,0.0656168,0.0249284,0.0107016,0.0422177,0.030321,0.0435832,0.058728,0.0728786,0.0483461,0.0194137,0.00962885,0.0664529},
< {0.0231371,0.00540847,0.141637,0.12843,0.0216004,0.149261,0.00760253,0.142178,0.0133023,0.201419,0.0156495,0.0208914,0.0162048,0.0133935,0.0107266,0.0216332,0.0133006,0.0377939,0.00385299,0.0125778},
< {0.0766444,0.00814295,0.0580542,0.0687741,0.0295623,0.0406286,0.0218404,0.058251,0.0563593,0.08622,0.0211464,0.0357257,0.133282,0.0382338,0.0505312,0.0586862,0.051006,0.0732785,0.00788015,0.0257529},
< {0.144948,0.0081771,0.0450677,0.0971048,0.0247819,0.0368458,0.0193982,0.0510416,0.0592379,0.133703,0.0241775,0.0331331,0.0138009,0.0525104,0.0727899,0.0500609,0.0449086,0.0579063,0.00766175,0.0227447}};
< 
< const double CG40RR[190] = {2.12217,0.503926,1.18578,0.173662,1.99745,0.375597,0.130289,0.600891,0.315447,0.974427,0.341716,1.31546,1.04178,0.475832,4.82756,2.30019,2.31143,0.115171,0.164569,0.0876139,0.00467958,0.886295,0.598855,0.672875,0.31569,0.0179567,0.554142,0.8082,0.655129,0.110071,0.116566,0.792975,3.0848,1.19461,1.71149,0.44818,1.01622,4.93204,0.0149826,0.912075,0.891024,0.0131022,0.25893,0.0158096,0.0286303,4.64195,0.408423,0.503391,0.114408,1.23433,0.444318,0.0475804,0.0272533,0.115851,0.016362,0.449137,0.395337,0.0484068,1.59446,0.0721862,0.171026,0.53977,0.469415,3.73883,0.317616,0.635304,0.614524,0.286041,0.0618362,0.0913531,0.0568102,0.771869,1.0566,0.0252126,2.35477,1.70651,0.0830369,0.0756267,0.0384776,0.0555207,0.29728,0.132488,0.589639,1.74254,8.29733,0.329984,0.00590078,0.3356,0.0307506,0.107171,1.40822,0.232511,0.313423,0.468012,1.81969,0.157843,0.0657661,0.183241,0.0456408,0.12067,0.699506,0.407497,0.443735,4.33737,0.570003,4.49524,2.40139,1.00828,0.571722,0.125984,0.528472,4.77292,0.180204,4.18196,4.68253,0.192733,0.0825132,0.0845518,0.137344,0.0682317,1.14993,11.1301,0.0905509,0.225436,0.159829,0.793921,2.17981,0.436602,3.18377,6.04153,0.803298,1.2426,0.201151,0.0425982,0.105731,6.32891,0.076606,0.308744,0.669219,0.343771,0.189489,0.316026,1.77375,0.499831,0.294454,0.394178,0.117567,1.71343,0.530052,0.334902,2.08675,2.08704,0.602524,0.443115,0.186093,1.65849,0.721742,4.35485,2.17936,0.0926852,0.0376483,0.543974,0.775039,0.412021,1.46901,0.644584,0.309975,0.0739819,0.0683957,2.67813,1.24897,1.09527,0.238322,0.19603,0.206394,0.92969,0.62089,0.179787,0.492174,0.247292,6.59788,0.108612,0.150532,0.334381,2.10875,0.0670639,0.17925,0.140445,0.213476,2.26885};
< 
< const double CG40StatWeight[40] = {0.00810409,0.0133755,0.050712,0.0135746,0.0226221,0.0487758,0.016721,0.00286897,0.0130862,0.0102669,0.00652415,0.00721928,0.0640191,0.0139998,0.0108572,0.00539617,0.0148846,0.00516825,0.00685468,0.00494693,0.024571,0.0114408,0.00310448,0.00746654,0.0851399,0.34477,0.0100322,0.0084026,0.00790613,0.0323001,0.00842155,0.011786,0.0096757,0.0135412,0.0113355,0.00788202,0.0172462,0.00618516,0.0242006,0.0146149};
< 
< const double CG40StatFix[40][20] = 
< {{0.0520413,0.019213,0.0140244,0.0218542,0.0342169,0.0414858,0.0525237,0.0530213,0.0300167,0.124981,0.0193445,0.0251652,0.0251958,0.0317007,0.200276,0.0424081,0.0511524,0.0821682,0.0272928,0.0519182},
< {0.0680126,0.00557639,0.0937984,0.0632506,0.0146351,0.106585,0.0194282,0.0146437,0.0912162,0.0227247,0.00796778,0.0393708,0.21802,0.0371457,0.0479645,0.0672561,0.0426671,0.0196734,0.00674999,0.0133139},
< {0.058243,0.0105248,0.038958,0.118371,0.0406724,0.0289017,0.0280178,0.058376,0.0616738,0.0731638,0.0191525,0.0334186,0.0146782,0.0471239,0.0707491,0.0499138,0.0964801,0.0937537,0.0140144,0.0438138},
< {0.0723789,0.0186378,0.0172516,0.0289023,0.0333063,0.0319859,0.0479012,0.0572833,0.0423952,0.134729,0.0231263,0.167299,0.0137589,0.034264,0.0554925,0.0440359,0.0479379,0.0691693,0.0108648,0.0492797},
< {0.140483,0.0314743,0.00969368,0.00916005,0.125807,0.191936,0.00966864,0.0512554,0.00915757,0.112099,0.0348002,0.0166883,0.0155382,0.0107055,0.0132298,0.0582549,0.0547051,0.0748739,0.0180491,0.0124203},
< {0.148668,0.00793134,0.0467575,0.0985171,0.0261082,0.0335013,0.0200238,0.0494704,0.0582048,0.133752,0.0238382,0.0341019,0.0137129,0.0512929,0.0739847,0.0500566,0.0435871,0.0561538,0.0076296,0.0227081},
< {0.166767,0.00522377,0.0612284,0.0922746,0.0207358,0.0345568,0.0172397,0.0680279,0.144261,0.0669428,0.0164691,0.0414591,0.0144323,0.0487753,0.0361914,0.0524818,0.0437221,0.0498679,0.00448499,0.0148591},
< {0.0470715,0.0165211,0.0189874,0.0241318,0.043848,0.0738661,0.071161,0.0262812,0.0178681,0.182692,0.0539728,0.0216823,0.0201313,0.239735,0.0191632,0.0306678,0.0288945,0.0336244,0.0105801,0.0191197},
< {0.220284,0.0183242,0.00660464,0.00510928,0.167718,0.0318231,0.00571518,0.12329,0.00452765,0.0910783,0.0186773,0.00752385,0.00690252,0.00482804,0.00668765,0.17773,0.0208588,0.0370894,0.0349876,0.0102415},
< {0.226067,0.0259802,0.0103911,0.00999094,0.0232214,0.0370227,0.0703817,0.0508036,0.0116342,0.147737,0.020527,0.0172374,0.00696564,0.0127519,0.0136119,0.0347791,0.0352966,0.112242,0.0182052,0.115154},
< {0.0343574,0.00907948,0.00855887,0.00889099,0.0176209,0.0332865,0.00830466,0.0398369,0.124321,0.305517,0.0139473,0.00977124,0.0152891,0.0140234,0.115465,0.015087,0.0169085,0.188117,0.0115021,0.0101155},
< {0.0264484,0.00486277,0.15666,0.0346032,0.0409039,0.038212,0.0128485,0.0102461,0.0256319,0.0270426,0.0049647,0.0571234,0.0392009,0.018226,0.0273179,0.115048,0.129555,0.0119237,0.137712,0.0814689},
< {0.0738331,0.00905205,0.0530077,0.0647854,0.0304129,0.122991,0.0228141,0.0643244,0.0560472,0.102611,0.0264318,0.0455084,0.0192593,0.0469301,0.060027,0.0663768,0.0458085,0.056486,0.00882487,0.024468},
< {0.0658338,0.0174934,0.0199088,0.0340323,0.034199,0.0259993,0.0296058,0.035354,0.100432,0.242248,0.0255387,0.0260436,0.0128369,0.0467962,0.0677223,0.0394334,0.0408271,0.0489791,0.0148132,0.0719028},
< {0.0165922,0.00705538,0.197096,0.012373,0.186794,0.0207849,0.0060436,0.0261296,0.00631277,0.257698,0.0212436,0.139407,0.009027,0.00612063,0.00724186,0.0203711,0.014333,0.0268329,0.0120295,0.0065135},
< {0.0332203,0.0128607,0.0218344,0.0249172,0.0391467,0.0175426,0.0205652,0.111366,0.0727401,0.0567816,0.0229279,0.0265284,0.0201994,0.0261454,0.0644574,0.025756,0.274535,0.0619797,0.011371,0.055125},
< {0.0873191,0.152638,0.0183687,0.0216866,0.0352961,0.0404637,0.0237228,0.0523163,0.0465181,0.103184,0.0251534,0.0267624,0.0155297,0.0307268,0.0605158,0.0671218,0.0505957,0.0830118,0.0174748,0.041594},
< {0.0579367,0.016158,0.0131742,0.00817218,0.0209621,0.228723,0.00670795,0.173132,0.00823042,0.0534562,0.108586,0.0185494,0.010213,0.00866164,0.008356,0.18024,0.0220819,0.0322394,0.00481861,0.0196016},
< {0.0573218,0.00316546,0.0782036,0.1505,0.0868572,0.0315086,0.0084578,0.00766338,0.0502086,0.0118368,0.00494787,0.0224994,0.251304,0.0275624,0.029062,0.0440198,0.0354864,0.0137829,0.00521462,0.0803964},
< {0.0369104,0.00396457,0.066419,0.101614,0.0741133,0.0309353,0.0178388,0.0149476,0.137483,0.0225574,0.0077247,0.0571479,0.0186556,0.0403034,0.0362035,0.0543619,0.138874,0.0206977,0.0651194,0.0541282},
< {0.18721,0.00544478,0.0835608,0.0860459,0.0631235,0.0580323,0.0208896,0.0243743,0.061062,0.0394324,0.0118693,0.0382003,0.0160411,0.0508638,0.0775492,0.0543519,0.0382026,0.0243818,0.0143598,0.045005},
< {0.176882,0.0407242,0.00761194,0.0066424,0.0368311,0.0355942,0.00857384,0.0339682,0.0065179,0.111044,0.019828,0.0105874,0.0092781,0.00760756,0.00931308,0.0419536,0.190199,0.106402,0.092098,0.0483441},
< {0.0342941,0.0343543,0.0221947,0.0145951,0.0520582,0.0323259,0.016394,0.0472928,0.0109018,0.051239,0.122872,0.147549,0.00832396,0.0140727,0.0151686,0.179251,0.023863,0.142836,0.0112448,0.01917},
< {0.0331793,0.00385996,0.0553737,0.0695779,0.0848483,0.230838,0.0195585,0.0066366,0.157459,0.0185177,0.00847826,0.0677394,0.0121745,0.0491965,0.0436706,0.0337946,0.0211961,0.0108752,0.00522876,0.0677966},
< {0.0822648,0.00763002,0.059615,0.0763254,0.0287686,0.0385771,0.021334,0.0574897,0.0617276,0.0812468,0.0200342,0.0355888,0.128121,0.0391938,0.0513802,0.0577481,0.0499316,0.0718456,0.00681306,0.0243641},
< {0.0759885,0.0105536,0.0627376,0.0781936,0.0401886,0.0442698,0.024735,0.0610305,0.0657117,0.102135,0.0226869,0.0425952,0.0189169,0.0485978,0.0584298,0.0619766,0.055191,0.0693325,0.0157993,0.0409302},
< {0.0599278,0.00752376,0.0523601,0.0721384,0.0499465,0.0537746,0.0219729,0.0746754,0.0840427,0.0486587,0.0150169,0.0375573,0.0155772,0.0362304,0.0509637,0.14337,0.0373884,0.0662811,0.00943224,0.0631621},
< {0.0413739,0.00570945,0.145295,0.0389812,0.0845615,0.243918,0.0105423,0.0063084,0.0243063,0.0139945,0.00565239,0.036724,0.0185392,0.0232147,0.0278591,0.0710839,0.100157,0.0120155,0.00722241,0.0825422},
< {0.22544,0.013757,0.00576032,0.00784642,0.064292,0.0465999,0.00466478,0.0670063,0.00633007,0.0356337,0.0118014,0.00773081,0.279709,0.00599314,0.00719816,0.0318779,0.0259238,0.0705094,0.0114836,0.0704429},
< {0.0229525,0.00464095,0.0843456,0.0452714,0.00705029,0.2453,0.032633,0.108374,0.061257,0.0251018,0.00599257,0.0842759,0.0109845,0.0396854,0.0525849,0.0306103,0.0156954,0.110813,0.00367872,0.00875273},
< {0.280586,0.0345691,0.00833595,0.0066832,0.0610699,0.0350307,0.00653088,0.0226692,0.00720209,0.040795,0.0168215,0.0116308,0.0123942,0.00632732,0.0100938,0.0286314,0.0499981,0.279137,0.0236133,0.0578807},
< {0.0877308,0.0153171,0.0780932,0.0481247,0.0652893,0.0411332,0.140441,0.0605391,0.0356989,0.0652407,0.0216385,0.0341753,0.0178322,0.030081,0.0327158,0.0537854,0.0403866,0.0753546,0.0209631,0.0354597},
< {0.0832862,0.0126801,0.0290739,0.107836,0.0231325,0.0226361,0.0195018,0.0330063,0.103664,0.0510426,0.0168192,0.0278368,0.0176713,0.0537752,0.0447064,0.0440934,0.0792841,0.207645,0.00395806,0.018351},
< {0.0382293,0.0143116,0.12609,0.0330414,0.0697488,0.0285659,0.0216971,0.0855716,0.0683079,0.0423922,0.0138145,0.0819752,0.0223792,0.0326013,0.0727054,0.052112,0.0315424,0.0997644,0.0133103,0.0518401},
< {0.0262281,0.0136862,0.140199,0.149588,0.0387319,0.0980033,0.0112242,0.0237615,0.0149693,0.216283,0.0855304,0.0190134,0.0156198,0.0146818,0.0136215,0.0248677,0.0171811,0.0229771,0.0133636,0.040469},
< {0.172235,0.00437536,0.0648551,0.117325,0.0203067,0.0337935,0.014481,0.0325745,0.0754791,0.0436332,0.0107095,0.0274357,0.158166,0.0372617,0.0387508,0.0478547,0.0384939,0.0413994,0.00501881,0.0158512},
< {0.229634,0.0102478,0.00347106,0.00380115,0.0187557,0.293449,0.00258105,0.139481,0.00293053,0.18508,0.0145325,0.00467376,0.00448198,0.00268628,0.00443753,0.029396,0.0105331,0.0273595,0.00301365,0.00945445},
< {0.0204045,0.00631159,0.00800439,0.00544478,0.141705,0.0403678,0.00532951,0.00558855,0.00478439,0.0286913,0.00474876,0.0115764,0.00960929,0.00441973,0.00901434,0.183109,0.182564,0.00751362,0.305985,0.0148284},
< {0.0725904,0.0144415,0.0149636,0.0168662,0.0465565,0.0500271,0.0196174,0.0560454,0.0156415,0.0977582,0.0198294,0.0280775,0.241042,0.0201243,0.0197088,0.0574855,0.0576544,0.084227,0.0239677,0.0433756},
< {0.0144177,0.00444978,0.0160635,0.00447944,0.0151234,0.528928,0.00178647,0.0878109,0.00202152,0.17028,0.0134353,0.00808987,0.00685251,0.00254821,0.00284449,0.0174064,0.00643841,0.0889414,0.00349958,0.00458304}};
< 
< const double CG50RR[190] = {2.03049,0.504754,1.18106,0.176222,1.89564,0.378192,0.141708,0.603419,0.330212,0.950535,0.341057,1.31696,1.03739,0.473729,4.77952,2.29473,2.32627,0.104394,0.152707,0.088683,0.00469828,0.910732,0.58788,0.697425,0.314919,0.0181307,0.542669,0.831487,0.657149,0.109296,0.117216,0.799117,3.07713,1.18014,1.69238,0.457301,1.05274,5.01875,0.0148698,0.908473,0.89823,0.012098,0.262369,0.014226,0.0282929,4.71787,0.417104,0.508355,0.115388,1.24846,0.44745,0.0459333,0.0278088,0.126761,0.0157006,0.44865,0.393497,0.047503,1.57927,0.070686,0.179361,0.545735,0.471375,3.73648,0.316227,0.63433,0.617146,0.282349,0.0650709,0.0966627,0.0543156,0.77061,1.06125,0.0258938,2.36068,1.72266,0.0851201,0.0748267,0.0391012,0.0559806,0.309739,0.136166,0.589837,1.75677,8.20694,0.329322,0.00634532,0.340171,0.0335622,0.10874,1.40896,0.231758,0.314721,0.466817,1.77435,0.156214,0.0673098,0.183702,0.0391402,0.117672,0.694314,0.419971,0.447983,4.32247,0.566547,4.5096,2.37735,0.991946,0.567634,0.127338,0.521382,4.70861,0.177473,4.14251,4.66531,0.176877,0.0835911,0.0837714,0.137849,0.0689384,1.14208,11.022,0.0858314,0.221245,0.157262,0.775773,2.19191,0.43297,3.17237,6.02359,0.807458,1.24237,0.199792,0.0448579,0.110005,6.37191,0.0725243,0.306182,0.660228,0.343389,0.186884,0.314517,1.76299,0.522463,0.311338,0.382589,0.117454,1.68561,0.526442,0.333687,2.05024,2.07433,0.615461,0.451775,0.186243,1.66908,0.729296,4.38486,2.15927,0.0918355,0.0381091,0.57255,0.778316,0.409123,1.47032,0.63879,0.313027,0.0777718,0.0704034,2.66525,1.24825,1.08518,0.235889,0.20469,0.21272,0.927587,0.621994,0.180421,0.499435,0.248503,6.58655,0.109045,0.141456,0.327775,2.09929,0.0705747,0.184347,0.136495,0.214855,2.18665};
< 
< const double CG50StatWeight[50] = {0.00900257,0.0116695,0.00671684,0.00671106,0.0213038,0.0239525,0.00906347,0.0224708,0.00935927,0.000832967,0.00922964,0.00368689,0.121198,0.00459856,0.0454193,0.0674107,0.00613985,0.0290999,0.00253986,0.0343031,0.00632091,0.206561,0.00770799,0.0863944,0.00426762,0.0141796,0.00936515,0.00424548,0.00568493,0.0186798,0.00736598,0.00537841,0.00913881,0.00681357,0.00279223,0.011548,0.0142288,0.00859468,0.0247643,0.00920131,0.018344,0.011497,0.0120652,0.0054294,0.00358691,0.00957676,0.002896,0.0113598,0.015397,0.00190672};
< 
< const double CG50StatFix[50][20] = 
< {{0.0214347,0.00806279,0.221178,0.0122703,0.167271,0.0131425,0.00762764,0.07403,0.00774683,0.133953,0.0222348,0.140943,0.0123039,0.00736134,0.012993,0.0217754,0.0132751,0.0799658,0.0153556,0.0070755},
< {0.225067,0.0194698,0.00598473,0.00498406,0.0722669,0.0289724,0.00624775,0.083929,0.00484461,0.11471,0.0191127,0.00651688,0.00653398,0.00507116,0.00709827,0.184685,0.0207273,0.0368793,0.120812,0.0260865},
< {0.0486098,0.0202791,0.0121077,0.0195674,0.0335347,0.0394645,0.056484,0.0537679,0.0283202,0.130187,0.0188516,0.0244565,0.0262858,0.0295471,0.211545,0.0388899,0.0529205,0.0836983,0.0201461,0.0513365},
< {0.229698,0.0134534,0.00541598,0.007715,0.0639091,0.0454587,0.00498395,0.063225,0.00632309,0.0422893,0.0121949,0.00775737,0.294116,0.00589434,0.0074369,0.0319538,0.0247838,0.0642133,0.0101692,0.059009},
< {0.0711323,0.00558019,0.0822729,0.058697,0.0750759,0.117432,0.0168943,0.0103449,0.0592318,0.0176644,0.00731667,0.037574,0.159831,0.0332996,0.0489148,0.0689579,0.0398562,0.0160687,0.00751868,0.0663369},
< {0.0828167,0.00792349,0.065875,0.0734199,0.0256692,0.0399903,0.0218061,0.0706354,0.13911,0.103563,0.0199927,0.0443485,0.0177537,0.0461386,0.0376396,0.0558978,0.0509642,0.0675227,0.00646651,0.0224666},
< {0.326661,0.00571154,0.00377205,0.00454124,0.0915568,0.379742,0.00275726,0.00558186,0.00376458,0.00990687,0.00285698,0.00418164,0.00412098,0.00272639,0.00466392,0.024581,0.00980078,0.00960349,0.00760846,0.0958614},
< {0.0737151,0.0151647,0.0136943,0.0163712,0.0447384,0.0454326,0.0193122,0.0548751,0.0149264,0.0998861,0.0198665,0.0262036,0.248271,0.0192554,0.0185473,0.0553653,0.0592277,0.0891102,0.0229685,0.0430685},
< {0.083985,0.0142698,0.0884376,0.0459966,0.0715223,0.040113,0.145091,0.0507898,0.0350215,0.0742728,0.0238076,0.0318826,0.0173944,0.0319073,0.0311057,0.0511689,0.0414744,0.071638,0.0168443,0.0332775},
< {0.0237196,0.00244913,0.0632928,0.0342324,0.0113323,0.0782817,0.0126045,0.0131899,0.328053,0.101558,0.0846367,0.108678,0.0140162,0.031974,0.0233979,0.0257528,0.017478,0.0124345,0.00500658,0.00791196},
< {0.165626,0.00468655,0.0659397,0.118136,0.0213418,0.0367859,0.0148564,0.0352276,0.0655068,0.0465158,0.0116687,0.0272495,0.157591,0.0360739,0.0396488,0.0486896,0.0385449,0.043329,0.00562515,0.0169571},
< {0.0553796,0.0151978,0.0178629,0.0332022,0.0281072,0.0445072,0.0446039,0.0391849,0.0210838,0.196846,0.0316852,0.0311958,0.0144065,0.217685,0.0241753,0.0407493,0.0469361,0.0606757,0.0154481,0.0210664},
< {0.0723329,0.0116056,0.0445291,0.10178,0.0444334,0.0381329,0.0285681,0.0605526,0.0614937,0.0781676,0.0207096,0.0377857,0.0173276,0.0457534,0.067275,0.0586363,0.0641554,0.0839844,0.0165268,0.0462499},
< {0.0131766,0.00346865,0.00191692,0.0015176,0.0692599,0.525575,0.00315431,0.104224,0.00142764,0.0286054,0.00764532,0.00353881,0.00300401,0.00165871,0.00284608,0.0126751,0.00639735,0.115323,0.00990813,0.0846783},
< {0.155477,0.00758695,0.0484461,0.0980626,0.0246501,0.034977,0.019243,0.05285,0.0617497,0.127566,0.0231069,0.0338875,0.0139008,0.0511721,0.0712255,0.0500262,0.0430288,0.0549225,0.0069556,0.0211657},
< {0.0775056,0.00910829,0.0547977,0.0711779,0.0302817,0.113439,0.0226071,0.0665231,0.060111,0.0977125,0.0239967,0.0448015,0.0184147,0.0489651,0.0582821,0.064203,0.0465052,0.0587052,0.00882817,0.0240348},
< {0.0321994,0.0078224,0.00786936,0.00841843,0.0165229,0.0354359,0.00734545,0.0402675,0.125662,0.308329,0.0138118,0.00839584,0.0144099,0.0134804,0.117529,0.0147605,0.0157826,0.192091,0.00997537,0.00989139},
< {0.0267322,0.00465574,0.0635923,0.052317,0.00684803,0.227009,0.0331728,0.105909,0.0893813,0.0242623,0.00646382,0.075582,0.0102979,0.0477259,0.0570883,0.0316721,0.0175668,0.107919,0.00333718,0.00846774},
< {0.0293332,0.0104953,0.012344,0.0339955,0.0473496,0.0238437,0.15154,0.103552,0.0185362,0.0363438,0.00991661,0.210223,0.0361882,0.0228873,0.0256944,0.0252337,0.0177471,0.107199,0.0446856,0.0328921},
< {0.0650593,0.00840784,0.0544778,0.0808585,0.0484164,0.0532176,0.022325,0.072853,0.0756376,0.0783673,0.0204155,0.0407797,0.017791,0.0425433,0.0531104,0.0983502,0.04653,0.0593344,0.0120422,0.0494831},
< {0.284729,0.0928228,0.00625725,0.00473709,0.0235895,0.034146,0.00574851,0.0439031,0.00561415,0.235211,0.0210194,0.0114054,0.00469191,0.00609934,0.00987391,0.0311627,0.0556536,0.0971795,0.00944299,0.0167125},
< {0.0786588,0.0105645,0.0665165,0.0734763,0.0380304,0.0428019,0.0240298,0.0570044,0.0627705,0.117331,0.0237181,0.0419032,0.0181785,0.0501791,0.0597012,0.0597243,0.0556595,0.0679299,0.0131181,0.0387042},
< {0.283772,0.0321986,0.00822359,0.00687384,0.0610738,0.0362096,0.007898,0.0246737,0.00782655,0.0466384,0.0183951,0.0111683,0.0125139,0.00662978,0.0105295,0.0263809,0.040523,0.283759,0.0211505,0.0535622},
< {0.0813537,0.00782688,0.0604028,0.0744483,0.0284738,0.0394368,0.0215789,0.0584659,0.0618185,0.0818131,0.0204753,0.0356692,0.127384,0.039371,0.0514589,0.0579755,0.0500933,0.0713014,0.00708548,0.0235677},
< {0.0905891,0.0160723,0.0197082,0.0278373,0.0503143,0.0708491,0.0201832,0.0430596,0.0389752,0.0429205,0.170478,0.0461859,0.00906362,0.0609074,0.039501,0.0658186,0.0512568,0.0847728,0.0110494,0.0404581},
< {0.0769554,0.141657,0.0184275,0.0231851,0.0369089,0.0427406,0.026512,0.0514645,0.0520563,0.0880965,0.0246093,0.026191,0.0168491,0.0329783,0.0634523,0.0716611,0.0534379,0.0919092,0.0187816,0.0421263},
< {0.196127,0.018132,0.0188841,0.0172268,0.0245877,0.0529273,0.0834304,0.0851918,0.015334,0.0529894,0.0166967,0.020546,0.00966766,0.0154682,0.017428,0.0747181,0.0463326,0.0802842,0.0257245,0.128304},
< {0.0374166,0.0347773,0.0167177,0.0102815,0.20305,0.0271997,0.0136052,0.136189,0.00904311,0.0710655,0.0243866,0.140308,0.00724407,0.00938097,0.0135349,0.159364,0.0248424,0.0419951,0.00993394,0.00966384},
< {0.0196925,0.00552313,0.0074211,0.00503798,0.140972,0.0350259,0.00501918,0.00495508,0.00432932,0.0220276,0.00415403,0.0106312,0.0096784,0.00428142,0.00821978,0.186135,0.184807,0.00683733,0.321559,0.0136934},
< {0.183722,0.00586283,0.0877931,0.0788525,0.0513447,0.0643219,0.0225794,0.0265987,0.0565859,0.0440291,0.012599,0.0373332,0.0158051,0.0513559,0.087361,0.0555898,0.0388636,0.0256218,0.0187846,0.034996},
< {0.0441525,0.00720348,0.0629535,0.0501673,0.0794543,0.238685,0.0238527,0.00861097,0.037356,0.0218036,0.00797044,0.0388446,0.0117668,0.0285973,0.0561638,0.082544,0.109003,0.0143617,0.0103229,0.0661857},
< {0.135634,0.0102837,0.00635964,0.00647479,0.0258542,0.219955,0.00701142,0.183549,0.00683777,0.0572472,0.0999204,0.0120632,0.0101317,0.00765039,0.00812786,0.11796,0.0190366,0.0285582,0.00652387,0.030821},
< {0.0456402,0.0106243,0.118693,0.0279058,0.0288825,0.153711,0.0146631,0.0221417,0.0132599,0.210286,0.0875839,0.0516188,0.0202022,0.013851,0.0128704,0.0973583,0.0265474,0.0208911,0.00658424,0.0166849},
< {0.0274075,0.00493751,0.172308,0.0340644,0.0706715,0.0436819,0.0123553,0.00961089,0.0269368,0.0243841,0.00497664,0.0536727,0.0389453,0.0188656,0.0273661,0.109599,0.138154,0.0116536,0.111603,0.0588071},
< {0.033488,0.00365432,0.0586058,0.110597,0.0625168,0.0269472,0.0208516,0.0118424,0.146999,0.0223014,0.00742032,0.0597987,0.0160796,0.0395299,0.0362181,0.0508921,0.144923,0.016928,0.0766736,0.053734},
< {0.0188824,0.0032272,0.0997179,0.0277424,0.0192499,0.203953,0.012732,0.150649,0.0170407,0.203251,0.0141193,0.111996,0.011772,0.011144,0.0135608,0.0239892,0.0110263,0.0296726,0.00178323,0.0144903},
< {0.0422885,0.0145775,0.109509,0.0352328,0.030695,0.0273664,0.0269274,0.0824142,0.0590594,0.0771516,0.0181064,0.0754771,0.0174769,0.0335254,0.0690189,0.0516945,0.0355469,0.0826922,0.0552124,0.0560278},
< {0.182014,0.0265617,0.00674673,0.00656692,0.0307606,0.0310612,0.00967731,0.0290588,0.00603855,0.0508792,0.0160966,0.00874649,0.0093806,0.0067142,0.00785415,0.0451626,0.189614,0.136739,0.106372,0.0939546},
< {0.160315,0.0333805,0.0079452,0.00801321,0.092492,0.220132,0.00793416,0.053201,0.00820483,0.121013,0.0321201,0.0136682,0.0136108,0.00959875,0.011813,0.0472728,0.0515062,0.07297,0.0175984,0.0172106},
< {0.0212982,0.00948981,0.134146,0.161912,0.196386,0.02299,0.00500057,0.0209348,0.0124627,0.265965,0.02317,0.01196,0.0179048,0.0140951,0.0107164,0.0169699,0.0148025,0.0214182,0.0116234,0.00675536},
< {0.0437888,0.00817691,0.048532,0.0861886,0.0393522,0.0240316,0.0257765,0.0687433,0.0730792,0.0736122,0.0203908,0.0325254,0.0146774,0.0470077,0.065822,0.0394014,0.158562,0.0790047,0.0144053,0.0369223},
< {0.203517,0.00440126,0.061856,0.105891,0.0604752,0.0387545,0.0171054,0.0262665,0.127004,0.0372463,0.0108642,0.0414034,0.0144238,0.0514598,0.0402549,0.0519748,0.0394305,0.0252181,0.0068053,0.0356481},
< {0.0957745,0.015448,0.0199684,0.0314944,0.0346142,0.035888,0.035955,0.0539959,0.0506955,0.131198,0.0254862,0.136477,0.0125714,0.0389344,0.0674028,0.0470554,0.0395577,0.0654315,0.00851784,0.0535343},
< {0.0552712,0.00452499,0.0661908,0.127118,0.00604743,0.0346082,0.0157723,0.0144688,0.117209,0.0192821,0.0066869,0.0314965,0.303561,0.0352357,0.0388286,0.0475496,0.0470676,0.0199645,0.0026662,0.0064505},
< {0.0475493,0.0308161,0.0197135,0.0143412,0.0191954,0.0445499,0.00906242,0.0420539,0.0119714,0.186021,0.0193712,0.159302,0.0186019,0.0169961,0.0121317,0.0386223,0.197241,0.096143,0.00591606,0.0104005},
< {0.0800118,0.0111459,0.0269546,0.124576,0.0217392,0.0221507,0.0180006,0.0343782,0.0970388,0.052946,0.0171654,0.0263939,0.018842,0.0550463,0.0469843,0.0425218,0.0803811,0.20353,0.00316147,0.0170323},
< {0.0335464,0.0168668,0.0168352,0.0131841,0.00639734,0.296219,0.00730897,0.108284,0.0108252,0.0233018,0.00539335,0.0198052,0.014667,0.0114374,0.0135504,0.259104,0.0190453,0.114025,0.00390286,0.00630033},
< {0.0612013,0.0170489,0.0173954,0.0330209,0.0358336,0.0266089,0.0315536,0.033043,0.0970651,0.253891,0.0257246,0.0239564,0.0128783,0.0423793,0.0746546,0.0355754,0.0354014,0.0427127,0.0164504,0.0836045},
< {0.019283,0.0049941,0.157051,0.0474776,0.012215,0.282429,0.00800079,0.0857461,0.0116645,0.165453,0.0133793,0.0362302,0.00738223,0.010992,0.00835791,0.021361,0.00967332,0.0904807,0.00265763,0.00517248},
< {0.045902,0.0513681,0.00562449,0.00664994,0.0227219,0.0224915,0.00612291,0.193085,0.0293532,0.0371005,0.0203279,0.0122309,0.0336271,0.00912338,0.0197408,0.0211941,0.392613,0.0518091,0.00254233,0.0163725}};
< 
< const double CG60RR[190] = {2.03489,0.503571,1.18407,0.173192,1.96172,0.376663,0.137494,0.595438,0.323629,0.960845,0.340616,1.30521,1.03612,0.471374,4.78695,2.30705,2.29946,0.106938,0.157653,0.089765,0.00477401,0.91609,0.581128,0.711287,0.309779,0.018249,0.538243,0.803144,0.6514,0.108035,0.118351,0.803997,3.07031,1.16369,1.6805,0.481103,1.07506,4.92883,0.0159651,0.905807,0.904108,0.0118888,0.261191,0.0146409,0.0294395,4.69152,0.416232,0.501912,0.114427,1.24471,0.44951,0.0440361,0.02834,0.120028,0.0159665,0.448725,0.394181,0.04575,1.58247,0.0718464,0.178109,0.540516,0.469448,3.72282,0.317572,0.637183,0.619518,0.282378,0.0646445,0.0931121,0.0508249,0.76055,1.07561,0.0246484,2.4145,1.71174,0.0907371,0.0763687,0.0382106,0.0548064,0.288327,0.128781,0.606355,1.81115,8.06568,0.325601,0.00659651,0.334865,0.0323737,0.105796,1.39118,0.233669,0.312958,0.464601,1.78658,0.154934,0.0686481,0.180939,0.0440332,0.120041,0.680275,0.423323,0.439281,4.32439,0.571524,4.49381,2.34678,1.00455,0.562087,0.126926,0.505877,4.68671,0.177961,4.10736,4.66042,0.182431,0.0814052,0.0833742,0.135658,0.069965,1.14193,10.9873,0.0856547,0.223929,0.162752,0.782684,2.17118,0.435208,3.15675,5.95782,0.805674,1.24853,0.204202,0.0439361,0.102574,6.36731,0.0736211,0.30358,0.671529,0.350597,0.184037,0.30687,1.75981,0.533553,0.307428,0.379542,0.118073,1.6793,0.524399,0.331537,2.06361,2.06427,0.606939,0.447349,0.186916,1.64887,0.720031,4.35848,2.15987,0.088656,0.0394138,0.549157,0.779795,0.411917,1.4572,0.638582,0.308494,0.0781403,0.0726679,2.64903,1.24534,1.08695,0.235009,0.198453,0.207635,0.923843,0.621501,0.183418,0.49174,0.239294,6.60379,0.108893,0.143796,0.318042,2.06223,0.0773033,0.183957,0.144187,0.218949,2.16707};
< 
< const double CG60StatWeight[60] = {0.00418823,0.0114729,0.0063772,0.0165134,0.00225714,0.0076382,0.00280431,0.00249213,0.0555471,0.00299391,0.0100301,0.001281,0.00963893,0.00737191,0.00214803,0.00714751,0.000972136,0.00835644,0.0107334,0.00331094,0.0118114,0.0338559,0.0894205,0.018495,0.00653946,0.0835675,0.00874911,0.00948803,0.00877228,0.0799817,0.00242747,0.00765164,0.0111173,0.0132187,0.0178862,0.00273529,0.00336731,0.00664489,0.00515887,0.160683,0.0172265,0.0138157,0.00310061,0.026549,0.00619331,0.00838417,0.0095709,0.00227887,0.0105387,0.00159332,0.0124242,0.0200322,0.0290606,0.00548089,0.00634009,0.00764041,0.00347481,0.00372489,0.0505757,0.00714892};
< 
< const double CG60StatFix[60][20] = 
< {{0.269208,0.0133852,0.00551378,0.00801876,0.0130826,0.0354504,0.00439604,0.0773178,0.00668839,0.0364054,0.00980678,0.00844795,0.36152,0.00585515,0.00824929,0.0288898,0.023856,0.0699362,0.00766691,0.00630536},
< {0.0631815,0.00650291,0.0744605,0.0727102,0.0201025,0.0402538,0.0200523,0.0834471,0.167258,0.0988666,0.0181843,0.0506377,0.0154051,0.0444493,0.0338524,0.0544521,0.0517279,0.0639354,0.00494362,0.0155772},
< {0.0270936,0.00917095,0.026528,0.0274681,0.00957712,0.215832,0.0941376,0.105756,0.0851715,0.0252395,0.00743786,0.0450366,0.0123992,0.0292645,0.100909,0.0311174,0.0187986,0.109756,0.00749667,0.0118092},
< {0.0174864,0.00462859,0.15453,0.0273598,0.0138019,0.299935,0.0086635,0.092995,0.00926426,0.158207,0.0130377,0.0546306,0.00700109,0.0079154,0.00671176,0.0223475,0.00883104,0.0847468,0.00283425,0.00507229},
< {0.044325,0.0383897,0.00895238,0.0108823,0.0265507,0.0203127,0.00845446,0.178427,0.0410078,0.0390441,0.0236521,0.0135168,0.0252884,0.0123787,0.0289744,0.021754,0.368792,0.0523032,0.00774349,0.0292512},
< {0.022275,0.00537013,0.144903,0.174117,0.0180324,0.0356072,0.00741307,0.173052,0.0141813,0.231644,0.0132023,0.012005,0.0362102,0.0130231,0.0153426,0.0183302,0.0122575,0.0261392,0.00889906,0.0179951},
< {0.0336128,0.00357236,0.0641784,0.105953,0.0614514,0.0250031,0.0198896,0.0114949,0.140465,0.0185338,0.00681154,0.0562766,0.0169475,0.039163,0.0379935,0.0490814,0.160466,0.0167806,0.0739171,0.0584089},
< {0.131704,0.0121435,0.187572,0.0326118,0.097777,0.0462222,0.152133,0.0141752,0.0176715,0.0369091,0.0145438,0.0324512,0.0126299,0.0256363,0.015376,0.069536,0.0231172,0.0182284,0.0218182,0.037743},
< {0.0698355,0.0128841,0.0649562,0.0635167,0.0380988,0.0405304,0.0304192,0.0632968,0.0579961,0.0870831,0.0223984,0.0422229,0.0179129,0.0462241,0.0657172,0.0630063,0.0561853,0.0734425,0.0421623,0.0421112},
< {0.0259599,0.00326484,0.0408035,0.0476138,0.0779938,0.248402,0.0287015,0.0053891,0.196565,0.0217143,0.0117958,0.0913632,0.00878545,0.0398852,0.0404984,0.0279789,0.0166897,0.00810532,0.00597299,0.0525176},
< {0.150585,0.0193062,0.00774527,0.00610292,0.202725,0.125824,0.00817875,0.104107,0.00599113,0.081796,0.0249836,0.0117236,0.0120894,0.00643503,0.00916794,0.124571,0.0247147,0.0466971,0.0188843,0.00837252},
< {0.02889,0.00884602,0.0263933,0.0194416,0.0422734,0.0703017,0.201523,0.0219758,0.0146608,0.159773,0.0296105,0.014706,0.0151495,0.199497,0.0152288,0.0137751,0.0289735,0.022591,0.0548255,0.0115647},
< {0.0687989,0.0177438,0.00885134,0.0114732,0.0321505,0.0215269,0.00896275,0.0500792,0.0115449,0.13334,0.0173972,0.0196962,0.302351,0.0140331,0.0162833,0.041125,0.0817458,0.10357,0.0165694,0.022758},
< {0.0420285,0.0138118,0.0112237,0.0175288,0.0430014,0.0277317,0.0183605,0.0290414,0.122007,0.293225,0.0246236,0.0173059,0.015669,0.0282324,0.106352,0.0244282,0.0231537,0.0346338,0.0142326,0.0934097},
< {0.185938,0.0037785,0.0421537,0.107954,0.00900661,0.0267173,0.0116174,0.0325447,0.144802,0.0332627,0.00838746,0.0227651,0.169326,0.0396849,0.0337178,0.0438256,0.0372375,0.0382973,0.00213739,0.0068468},
< {0.044181,0.0120308,0.0168937,0.00870621,0.013564,0.317264,0.00731223,0.0234353,0.00641257,0.212986,0.0906559,0.0192972,0.00981107,0.00686188,0.00691819,0.14737,0.0197627,0.0202185,0.00343244,0.012886},
< {0.0520391,0.0151349,0.017803,0.0171742,0.0423821,0.0223936,0.00959476,0.0178426,0.0134905,0.0739602,0.0107806,0.0141118,0.312148,0.0191122,0.0112515,0.244534,0.0262192,0.0195031,0.0401793,0.0203455},
< {0.293168,0.032102,0.007843,0.00668659,0.0632742,0.0329806,0.00668601,0.0249365,0.00705679,0.0467033,0.0171589,0.0115563,0.0120711,0.00627001,0.00995321,0.0272663,0.0447172,0.271693,0.0222654,0.0556116},
< {0.234394,0.0179478,0.00558287,0.0051766,0.0359043,0.0196722,0.00817143,0.0828278,0.00481577,0.0658268,0.0162905,0.00680613,0.00503519,0.00526593,0.00758134,0.179148,0.0228998,0.0523337,0.135443,0.0888771},
< {0.0397477,0.0477247,0.0158057,0.0130391,0.0204568,0.0344081,0.015342,0.20744,0.00959503,0.0496832,0.118768,0.147035,0.00685117,0.00916103,0.0129862,0.183131,0.0194348,0.0295692,0.00661479,0.0132074},
< {0.0748523,0.152455,0.0192494,0.0243648,0.0371102,0.0404827,0.0244154,0.0554831,0.0500132,0.0864577,0.0250411,0.0275388,0.016951,0.0344166,0.065798,0.071982,0.0489229,0.0876551,0.0145853,0.0422258},
< {0.158454,0.0072417,0.0453608,0.110948,0.0265664,0.034459,0.0191017,0.0578125,0.0607329,0.108114,0.0214921,0.0334571,0.014276,0.0496469,0.0740877,0.0492194,0.0430165,0.0553243,0.00767637,0.0230133},
< {0.0737036,0.0107048,0.0659099,0.0762202,0.0521466,0.0448097,0.0246506,0.0642724,0.06737,0.0703113,0.0203034,0.0427631,0.0206415,0.0496211,0.0605369,0.0619802,0.058,0.0803238,0.0122183,0.0435125},
< {0.241863,0.0127861,0.00360938,0.00400188,0.0748791,0.287388,0.0028158,0.0850417,0.00348113,0.143747,0.0220454,0.00514186,0.00501863,0.00340018,0.00471135,0.0262598,0.0133959,0.0405148,0.00634811,0.0135504},
< {0.220857,0.0129839,0.00960571,0.00955418,0.0199261,0.0222778,0.0708578,0.0392851,0.00850013,0.0448767,0.015441,0.011911,0.00772309,0.00956383,0.0114086,0.046769,0.156843,0.104764,0.0308554,0.145997},
< {0.0828264,0.00762221,0.0616316,0.0751943,0.0272302,0.0394287,0.0213199,0.058172,0.0632183,0.0826887,0.020402,0.0360933,0.125322,0.0401334,0.0523371,0.0581395,0.0502251,0.069454,0.00657638,0.0219852},
< {0.0338415,0.00843298,0.11607,0.0341489,0.0275395,0.0377956,0.029164,0.101423,0.0539468,0.137184,0.0231136,0.0883512,0.0183339,0.0263377,0.057497,0.0338668,0.0257155,0.0464949,0.00881888,0.0919242},
< {0.0881114,0.0148359,0.0423463,0.0893261,0.0508062,0.0310756,0.114672,0.0531527,0.0440489,0.0743347,0.0201118,0.0301687,0.0150632,0.0315608,0.0440939,0.0504047,0.0541349,0.0914067,0.0147013,0.0456445},
< {0.0793836,0.0103156,0.0283198,0.127475,0.0217271,0.0231537,0.0180005,0.0353472,0.0977219,0.0519685,0.0163031,0.0283306,0.0146253,0.0567351,0.0490677,0.0450954,0.0824298,0.19241,0.00365219,0.0179378},
< {0.0983632,0.00972532,0.0661056,0.0696027,0.0287386,0.0407277,0.0222378,0.0504361,0.0654214,0.148146,0.0247455,0.0397314,0.0161021,0.054453,0.0616033,0.0557842,0.0510953,0.0621564,0.00836122,0.0264633},
< {0.0650834,0.0491674,0.00554172,0.00637347,0.0132829,0.0944882,0.00263293,0.022646,0.00444272,0.0474758,0.0138411,0.00619315,0.0219593,0.00492929,0.00532864,0.02274,0.291088,0.302704,0.0162661,0.00381508},
< {0.0430884,0.0162915,0.00877041,0.0061247,0.195831,0.0761695,0.00534918,0.019206,0.00616154,0.267433,0.0131868,0.0142298,0.0125027,0.00590078,0.00659836,0.133253,0.12726,0.0241248,0.0115176,0.00700061},
< {0.100274,0.014977,0.0191308,0.0306974,0.0334728,0.03317,0.0360789,0.0582656,0.0497924,0.117755,0.0233451,0.139412,0.0120383,0.0390865,0.0689748,0.0478077,0.0401825,0.0699265,0.0101318,0.0554806},
< {0.196838,0.00571003,0.0905234,0.0807009,0.0364832,0.0545659,0.0224733,0.030659,0.0559828,0.0502832,0.012933,0.0385726,0.0151897,0.0540763,0.0951888,0.0522069,0.0388601,0.0275319,0.0151217,0.0260994},
< {0.129318,0.039126,0.0105281,0.010207,0.0764096,0.193713,0.0101923,0.0459801,0.0100169,0.108475,0.0297687,0.0164815,0.0139083,0.0122044,0.0137898,0.0523074,0.0817051,0.0896605,0.029432,0.026776},
< {0.0458144,0.030447,0.0172454,0.0143617,0.0200373,0.0502985,0.00825587,0.0511221,0.0122962,0.146794,0.018767,0.212507,0.0188296,0.016424,0.0120186,0.0404026,0.184248,0.0822077,0.005418,0.012506},
< {0.111781,0.0147157,0.0186234,0.0249818,0.0536604,0.0830702,0.0220727,0.0335792,0.0473539,0.0441903,0.1735,0.043165,0.0090145,0.0585345,0.0455082,0.0651241,0.0510379,0.0444671,0.012215,0.0434049},
< {0.0246972,0.0117623,0.125367,0.114548,0.141264,0.137627,0.0097206,0.025896,0.0168464,0.182643,0.0553451,0.0272754,0.00739417,0.0183675,0.0128063,0.0240353,0.0162292,0.0249602,0.0152561,0.00795963},
< {0.0309644,0.00999775,0.11331,0.0296506,0.0768836,0.0420076,0.0191258,0.0897777,0.0570099,0.0348745,0.010633,0.0687768,0.0120384,0.0230934,0.0613009,0.144067,0.026133,0.101602,0.0133134,0.0354401},
< {0.072266,0.0102184,0.0517687,0.0950703,0.0411478,0.0443873,0.0242213,0.0617904,0.0658437,0.100632,0.0223594,0.0412869,0.0178779,0.046187,0.0591997,0.0645828,0.054991,0.0693761,0.0120541,0.0447394},
< {0.0618413,0.00482007,0.0888378,0.0565399,0.0811942,0.118131,0.0128993,0.00834433,0.0562705,0.0142581,0.00595626,0.0382863,0.164089,0.0318144,0.0491224,0.0711567,0.042634,0.0139728,0.00557625,0.074255},
< {0.122386,0.00568562,0.05925,0.0823269,0.0788444,0.13873,0.016442,0.0146469,0.0825927,0.0235032,0.00914579,0.0379757,0.0185574,0.0445817,0.055911,0.0718355,0.0360835,0.0188254,0.0127009,0.0699756},
< {0.0890683,0.00538748,0.030639,0.195955,0.00979638,0.0177161,0.0122413,0.0439189,0.0433,0.0519788,0.0129031,0.018498,0.190437,0.0328772,0.0263208,0.0370614,0.042854,0.127892,0.00368064,0.0074749},
< {0.024846,0.00458951,0.074297,0.0534399,0.00673798,0.231783,0.0267467,0.108869,0.0695202,0.0243092,0.00604431,0.0862321,0.0108379,0.0495179,0.0510762,0.0318472,0.0165701,0.111329,0.00304907,0.00835706},
< {0.0244174,0.00489396,0.160963,0.0320525,0.0880157,0.0338822,0.0119483,0.00997069,0.0228931,0.0350139,0.00600504,0.0614953,0.0345717,0.0169126,0.0244614,0.10861,0.137054,0.0115409,0.135058,0.0402402},
< {0.154992,0.00496452,0.0861302,0.111382,0.0692263,0.0399967,0.0126776,0.0221806,0.0389107,0.0312673,0.0100711,0.0250059,0.13838,0.0298271,0.0337106,0.0523295,0.0369363,0.028865,0.0107126,0.062435},
< {0.0267537,0.00795484,0.197046,0.0111022,0.0196288,0.0146232,0.00741475,0.0459751,0.00626475,0.267154,0.016104,0.141628,0.0070205,0.00677252,0.00746031,0.0198844,0.0118344,0.172462,0.00651314,0.00640384},
< {0.0395933,0.0219256,0.0130348,0.0309249,0.0857011,0.019066,0.135678,0.0213391,0.0153218,0.16065,0.0581322,0.211846,0.0300097,0.0230703,0.0218389,0.0291774,0.0174123,0.0221277,0.0174241,0.0257275},
< {0.203487,0.00447037,0.0673934,0.101618,0.0540278,0.0347095,0.0174024,0.0284674,0.130739,0.042319,0.0114508,0.0425069,0.0131285,0.0526563,0.0399156,0.052014,0.0402123,0.0265381,0.00717916,0.029765},
< {0.0460203,0.00739177,0.118815,0.0985432,0.0357327,0.0139629,0.0129906,0.0458196,0.0226783,0.0513222,0.147578,0.0188573,0.00786768,0.0736513,0.0181371,0.0265932,0.0331006,0.199814,0.00694103,0.0141836},
< {0.125387,0.0182923,0.0202843,0.0297506,0.0330153,0.0272809,0.0375953,0.0489719,0.113517,0.117523,0.0252946,0.0232859,0.0130399,0.034582,0.0543283,0.0493626,0.0429494,0.0995598,0.0156714,0.0703077},
< {0.0940518,0.0138662,0.0195902,0.0204566,0.0515227,0.0850886,0.0304329,0.0640517,0.0204133,0.0781691,0.0235832,0.031355,0.177292,0.0228116,0.0254432,0.0576935,0.0387261,0.0710895,0.0241932,0.0501698},
< {0.0490678,0.00927317,0.0425124,0.100235,0.0383256,0.0250193,0.0260489,0.0633305,0.0656124,0.0827497,0.0203373,0.0330786,0.0143256,0.0476995,0.0725601,0.0427884,0.129719,0.0849623,0.0140863,0.0382677},
< {0.0542128,0.00492328,0.0762294,0.102414,0.00642646,0.0410506,0.0175865,0.0137387,0.127494,0.018898,0.00715238,0.0363635,0.284654,0.0372132,0.0409982,0.0527735,0.048276,0.0188452,0.00402652,0.00672442},
< {0.0398374,0.00501685,0.106609,0.0474481,0.0825963,0.219594,0.0130281,0.00676345,0.0325544,0.0144276,0.00572445,0.0377354,0.0121123,0.0288948,0.0435175,0.0808034,0.116884,0.012436,0.0113275,0.0826899},
< {0.0539247,0.021219,0.0126118,0.0222247,0.034225,0.029726,0.0477668,0.0487313,0.0305514,0.147095,0.0192766,0.0243552,0.0227287,0.0316878,0.19374,0.0397249,0.0585798,0.0854704,0.018391,0.0579699},
< {0.0656153,0.0125688,0.0189567,0.0368963,0.0264629,0.0481871,0.0167442,0.0369709,0.0254016,0.187732,0.0325312,0.038552,0.0155398,0.199939,0.0263241,0.0561504,0.0511057,0.0570488,0.00797307,0.0393001},
< {0.012904,0.00170638,0.00735851,0.00403501,0.141313,0.0170429,0.0025491,0.0030635,0.0031484,0.013535,0.0021231,0.00888809,0.00782511,0.00311805,0.00646208,0.191536,0.193927,0.00394014,0.364466,0.0110595},
< {0.0673302,0.00934423,0.05595,0.0644438,0.0295913,0.120099,0.0243047,0.0669625,0.0575751,0.10183,0.0258663,0.0471303,0.0183924,0.047575,0.0594031,0.0657573,0.0463845,0.0606094,0.00818042,0.0232702},
< {0.265422,0.100319,0.0063246,0.00488977,0.0241983,0.0307479,0.00614797,0.0422519,0.00561867,0.226101,0.0212994,0.0111957,0.00528802,0.00625234,0.00983732,0.035293,0.0682114,0.0947064,0.0175499,0.0183447}};
< 
< 
890c631
< 	enum 	Prior 		{Flat = 0, PowerLaw = 1, GammaInv = 2, Dirichlet = 3 , MultiGamma = 4, Exponential = 5, OnOff = 6, GammaDistributed = 7, Dirac = 8, GammaMixture = 9, AlphaBased = 10, BetaBased = 11, Trapezoidal = 12, DirichletProcess = 13, Normal = 14, Cauchy=15};
---
> 	enum 	Prior 		{Flat = 0, PowerLaw = 1, GammaInv = 2, Dirichlet = 3 , MultiGamma = 4, Exponential = 5, OnOff = 6, GammaDistributed = 7, Dirac = 8, GammaMixture = 9, AlphaBased = 10, BetaBased = 11, Trapezoidal = 12, DirichletProcess = 13, Normal = 14};
1282c1023
< 	const Prior DefaultRatePrior = GammaInv;		// flat
---
> 	const Prior DefaultRatePrior = Dirichlet;		// flat
1286c1027
< 	const double DefaultGammaMax = 100;
---
> 	const double DefaultGammaMax = 50;


PolyNode.h


Random.h


Sample.h
25c25
< 	void		Dating(int ps = 0, int verbose = 0, double alpha = 0.05);
---
> 	void		Dating(int ps = 0, int verbose = 0);
29d28
< 	void		ReadBranchFreqs();
31,33d29
< 	void		ReadSiteLogLikelihood();
< 	void 		ReadSummedLogLikelihood();
< 	void		ReadFiniteTimeEntropy(double timemax, int N);
59c55
< 	void		SampleSub(double*** statepostprob = 0, int* sitemask = 0);
---
> 	void		SampleSub(double*** statepostprob = 0);
66c62
< 	void 		HomoplasyStochastic(int nrep, int ncat, int priormode, int priorratemode, int priorrootstate, int redraw, double cutoff);
---
> 	void 		HomoplasyStochastic(int nrep, int ncat, int priormode, int priorratemode, int priorrootstate, int redraw);
84d79
< 	void		ConstantSiteCorrection(double rho);


SubMatrix.h


TaxaParameters.h


TexTab.h


Tree.h


TreeList.h
